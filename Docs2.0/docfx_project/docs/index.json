{
  "GettingStarted/ConnectionProvider.html": {
    "href": "GettingStarted/ConnectionProvider.html",
    "title": "Create Connection Provider | DbFacade",
    "summary": "Create Connection Provider Add a SqlDbConnectionProvider instance SqlDbConnectionProvider connectionProvider = new SqlDbConnectionProvider(); Add a connection string connectionProvider.BindConnectionString(\"Some Safely Stored Configured Connection String\");"
  },
  "GettingStarted/CreateMethods.html": {
    "href": "GettingStarted/CreateMethods.html",
    "title": "Create Methods | DbFacade",
    "summary": "Create Methods Given the model defininitions in the previous secion, you can create methods as follows. See Endpoints for 'Endpoints' class definition. public class EndpointMethods { private static Endpoints Endpoints = new Endpoints(); public IDbResponse TestFetchData(MyParametersModel parameters, out IEnumerable<MyDataModel> data) => Endpoints.MyEndpoint.ExecuteAndFetchFirst(parameters, out data); public IDbResponse GetLookupListA(out IEnumerable<LookupItem> data) => Endpoints.LookupListA.ExecuteAndFetchFirst((model, collection) => { model.Identifier = collection.GetValue<Guid>(\"Identifier\"); model.Name = collection.GetValue<string>(\"LookupListA__Name\"); model.Value = collection.GetValue<string>(\"LookupListA__Value\"); }, out data); public IDbResponse GetLookupListB(out IEnumerable<LookupItem> data) => Endpoints.LookupListB.ExecuteAndFetchFirst((model, collection) => { model.Identifier = collection.GetValue<Guid>(\"Identifier\"); model.Name = collection.GetValue<string>(\"LookupListB__Name\"); model.Value = collection.GetValue<string>(\"LookupListB__Value\"); }, out data); }"
  },
  "GettingStarted/DefineDataModels.html": {
    "href": "GettingStarted/DefineDataModels.html",
    "title": "Define Data Models | DbFacade",
    "summary": "Define Data Models For the most part data models should impliment the 'IDbDataModel' interface. This should be used where there is a 1 to 1 pairing of data model type to endpoint. public class MyDataModel : IDbDataModel { public Guid Identifier { get; private set; } public string FirstName { get; private set; } public string LastName { get; private set; } public int Age { get; private set; } public DateTime? UpdateDate { get; private set; } public void Init(IDataCollection collection) { Identifier = collection.GetValue<Guid>(\"Identifier\"); FirstName = collection.GetValue<string>(\"FirstName\"); LastName = collection.GetValue<string>(\"LastName\"); Age = collection.GetValue<int>(\"Age\"); UpdateDate = collection.GetValue<DateTime?>(\"UpdateDate\"); } } There are cases where a common class are prefrered, such as a data for a lookup list public class LookupItem { public Guid Identifier { get; internal set; } public string Name { get; internal set; } public string Value { get; internal set; } } See"
  },
  "GettingStarted/DefineEndpoints.html": {
    "href": "GettingStarted/DefineEndpoints.html",
    "title": "Define Endpoints | DbFacade",
    "summary": "Define Endpoints Create a DbConnectionConfig instance from Connection Provider DbConnectionConfig dbConnectionConfig = connectionProvider.DbConnectionConfig; Define Endpoint IDbCommandMethod myEndpoint = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... }); Configure as Stored Procedure IDbCommandMethod myEndpoint_AsStoredProcedure = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { o.AsStoredProcedure(\"[dbo].[MyEndpointStoredProcedureName]\"); //... }); Configure as query IDbCommandMethod myEndpoint_AsQuery = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { o.AsQuery(\"SELECT ColumnA, ColumnB, ColumnC FROM MySampleTable\"); //... }); Configure as non-query IDbCommandMethod myEndpoint_AsNonQuery = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { o.AsNonQuery(\"UPDATE MySampleTable SET ColumnA = 1, ColumnB = 2, ColumnC = 3 FROM MySampleTable WHERE ColumnD = 5\"); //... }); Configure as XML Query Note Only applies to SQL connections. IDbCommandMethod myEndpoint_AsXml = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { o.AsXml(\"SELECT * FROM [dbo].[SomeTestTable] FOR XML AUTO, XMLDATA\"); //... }); Configure as table direct Note As stated by microsoft this is only supported by the .NET Framework Data Provider for OLE DB. IDbCommandMethod myEndpoint_AsTableDirect = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { o.AsTableDirect(\"TableName\"); //... }); Configure as transaction IDbCommandMethod myEndpoint_AsTransaction = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.AsTransaction(); //... }); Binding Parameters See for Binding Parameters for more details. IDbCommandMethod myEndpointWithParameters = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.WithParameters<MyParametersModel>(p => { p.AddInput(\"ParameterA\", model => model.ParameterA); p.AddInput(\"ParameterB\", model => model.ParameterB); }); //... }); Binding Single Parameter Value In the case of an endpoint only having a single input parameter with a struct type like int, string, Guid etc you may use the following IDbCommandMethod myEndpointSingleParameterValue = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.WithParameters<Guid>((m, p) => { p.AddInput(\"SomeGuid\", m); }); //... }); Validating Parameters Optional if model validation handled separately See for Validating Parameters for more details. IDbCommandMethod myEndpointWithValidation = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.WithValidation<MyParametersModel>(v => { v.AddIsNotNullOrWhiteSpace(m => m.ParameterA, \"ParameterA is required.\"); }); //... }); Best Practice For most of my projects I work with I use the following approach: Create a internal class to hold the endpoint definitions. Make the 'IDbCommandMethod' class property values private set. Initialize the properties in the logially broken down Init methods. If I have a lot of endpoints I make the class a partial class and separted 'IDbCommandMethod' class properties and Init methods. internal class Endpoints { internal IDbCommandMethod MyEndpoint { get; private set; } internal IDbCommandMethod LookupListA { get; private set; } internal IDbCommandMethod LookupListB { get; private set; } private readonly SqlDbConnectionProvider ConnectionProvider; private DbConnectionConfig DbConnectionConfig => ConnectionProvider.DbConnectionConfig; internal Endpoints() { ConnectionProvider = new SqlDbConnectionProvider(); ConnectionProvider.BindConnectionString(\"Some Safely Stored Configured Connection String\"); InitBaseMethods(); InitLookupListMethods(); } private void InitBaseMethods() { MyEndpoint = DbConnectionConfig.Dbo.DefineEndpoint(\"MyEndpoint\", o => { o.AsStoredProcedure(\"MyEndpointStoredProcedureName\") .WithParameters<MyParametersModel>(p => { p.AddInput(\"ParameterA\", model => model.ParameterA); p.AddInput(\"ParameterB\", model => model.ParameterB); }) .WithValidation<MyParametersModel>(v => { v.AddIsNotNullOrWhiteSpace(m => m.ParameterA, \"ParameterA is required.\"); }); }); } private void InitLookupListMethods() { LookupListA = DbConnectionConfig.Dbo.DefineEndpoint(\"LookupListA\", o => { o.AsStoredProcedure(\"LookupListA__StoredProcedureName\"); }); LookupListB = DbConnectionConfig.Dbo.DefineEndpoint(\"LookupListB\", o => { o.AsStoredProcedure(\"LookupListB__StoredProcedureName\"); }); } }"
  },
  "GettingStarted/ErrorHandling.html": {
    "href": "GettingStarted/ErrorHandling.html",
    "title": "Error Handling | DbFacade",
    "summary": "Error Handling The DbFacade package offers Global Error Handling Define an error handler method private void OnError(EndpointErrorInfo endpointErrorInfo) { //handle error here } Then bind the method to the Connection Provider connectionProvider.BindErrorHandler(OnError); Endpoint Error Handling Basic Setup Basic Endpoint Specific Error Handling IDbCommandMethod myEndpointWithErrorHandling = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.BindErrorHandler(errorInfo => { if(errorInfo.ExceptionType != DbExecutionExceptionType.ValidationError) { //Do something with non validation error } }); //... }); Add Custom Data To Error Info If there is additional error data you wish to return to either the global error handler or resonse object you may use the following. IDbCommandMethod myEndpointWithErrorHandlingData = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.BindErrorHandler(errorInfo => { //log only errors that are not validation errors bool logError = errorInfo.ExceptionType != DbExecutionExceptionType.ValidationError; errorInfo.ErrorData[\"logError\"] = logError; }); //... });"
  },
  "GettingStarted/ParameterBinding.html": {
    "href": "GettingStarted/ParameterBinding.html",
    "title": "Binding Parameters | DbFacade",
    "summary": "Binding Parameters Adding Input Parameters Bind input parameters as follows IDbCommandMethod myEndpointWithParametersInput = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.WithParameters<MyParametersModel>(p => { p.AddInput(\"ParameterA\", model => model.ParameterA); p.AddInput(\"ParameterB\", model => model.ParameterB); p.AddInput(\"ParameterC\", \"SomeHardedCodedValue\"); }); //... }); Adding Output Parameters Bind output values as follows. IDbCommandMethod myEndpointWithParametersOutput = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.WithParameters<MyParametersModel>(p => { p.AddOutput<string>(\"OutputString\"); p.AddOutput<string>(\"OutputStringWithSize\", 100); p.AddOutput<int>(\"OutputInteger\"); }); //... }); Adding InputOutput Parameters If you are using model parameters that are also used as output values you may define them as follows. IDbCommandMethod myEndpointWithParametersInputOutput = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.WithParameters<MyParametersModel>(p => { p.AddInputOutput(\"ParameterD\", model => model.ParameterD); p.AddInputOutput(\"ParameterEWithSize\", model => model.ParameterE, 100); }); //... }); Adding Only Hard Coded params In the case of only needing hard coded parameters and no parameter type is required you may use the following. IDbCommandMethod myEndpointWithParametersHardCodededOnly = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.WithParameters(p => { p.AddInput(\"ParameterA\", \"ParameterAValue\"); p.AddInput(\"ParameterB\", 23); p.AddInput(\"ParameterC\", \"SomeHardedCodedValue\"); }); //... }); Binding Multiple Expected Parameter Model Types In the case of you endpoint could expect multiple object types that are handled slightly diferently you can do the following. IDbCommandMethod myEndpointWithParametersMultipleExpectedTypes = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... //Set first accepted Parameter Type o.WithParameters<MyParametersModel>(p => { p.AddInput(\"ParameterA\", model => model.ParameterA); p.AddInput(\"ParameterB\", model => model.ParameterB); }) //Set second accepted Parameter Type .WithParameters<MyParametersModelOther>(p => { p.AddInput(\"ParameterA\", model => model.ParameterOne); p.AddInput(\"ParameterB\", model => model.ParameterTwo); }) // Set Common parameters .WithParameters(p => { p.AddInput(\"ParameterC\", \"SomeHardedCodedValue\"); }); //... });"
  },
  "GettingStarted/ParameterValidation.html": {
    "href": "GettingStarted/ParameterValidation.html",
    "title": "Validating Parameters | DbFacade",
    "summary": "Validating Parameters Example Base Class Reference Snipets below all go into this example. IDbCommandMethod myEndpointValidation = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... o.WithValidation<MyParametersModelForValidation>(v => { //Implement Model Validation here }); //... }); Parameters class used in validation example internal class MyParametersModelForValidation { internal DateTime? DateTimeNullable = DateTime.Parse(\"01/01/1979\"); internal string DateString = \"01/01/1979\"; internal int IntegerValue = 10; internal int IntegerValueLow = 9; internal int IntegerValueHigh = 11; internal string MyString = \"1234567890\"; internal string StringNumeric = \"1234567890\"; internal string StringNull = null; internal string StringEmpty = \"\"; internal string StringWhiteSpace = \" \"; internal string StringAlphaNumeric = \"abc123ABC\"; internal bool CustomCheck() { return true; } internal string Email = \"my.name@testdomain.com\"; internal MailAddress MailAddress = new MailAddress(\"my.name@testdomain.com\"); } Date String Validation If you need to validate date strings you can use the following. //Check if model value is non null DateTime object v.AddIsDateTime(m => m.DateTimeNullable, \"incorrect Date\"); //Check if model value string can be parsed to DateTime object v.AddIsDateTime(m => m.DateString, \"DateString is incorrect Date\"); //Check if model value string can be parsed to DateTime object with specific format v.AddIsDateTime(m => m.DateString, \"dd/MM/yyyy\", \"DateString is incorrect Date\"); //Check if model value string can be parsed to DateTime object with specific format and format provider v.AddIsDateTime(m => m.DateString, \"dd/MM/yyyy\", CultureInfo.InvariantCulture, \"DateString is incorrect Date\"); //Check if model value string can be parsed to DateTime object with specific format, format provider, and style v.AddIsDateTime(m => m.DateString, \"dd/MM/yyyy\", CultureInfo.InvariantCulture, DateTimeStyles.None, \"DateString is incorrect Date\"); //Check if model value string can be parsed to DateTime object with specific format, and style v.AddIsDateTime(m => m.DateString, \"dd/MM/yyyy\", DateTimeStyles.None, \"DateString is incorrect Date\"); IComparable Validation If you need to validate an value that is also an IComparable object (int, double, float, DateTime etc) you can do so like the following. //Check if model value is equal to a value v.AddIsEqualTo(m => m.IntegerValue, 10, \"IntegerValue Not Equal To 10\"); //Check if model value is equal to another model value v.AddIsEqualTo(m => m.IntegerValue, m => m.IntegerValueHigh, \"IntegerValue Not Equal To IntegerValueHigh\"); //Check if model value is not equal to a value v.AddIsNotEqual(m => m.IntegerValue, 11, \"IntegerValue Is Equal To 11\"); //Check if model value is not equal to another model value v.AddIsNotEqual(m => m.IntegerValue, m => m.IntegerValueHigh, \"IntegerValue Is Equal To IntegerValueHigh\"); //Check if model value is greator than or equal to a value v.AddIsGreaterThanOrEqualTo(m => m.IntegerValue, 9, \"IntegerValue Not Greater Than Or Equal To 9\"); //Check if model value is greator than or equal to another model value v.AddIsGreaterThanOrEqualTo(m => m.IntegerValue, m => m.IntegerValueLow, \"IntegerValue Not Greater Than Or Equal To IntegerValueLow\"); //Check if model value is greator than a value v.AddIsGreatorThan(m => m.IntegerValue, 9, \"IntegerValue Not Greater Than 9\"); //Check if model value is greator than another model value v.AddIsGreatorThan(m => m.IntegerValue, m => m.IntegerValueLow, \"IntegerValue Not Greater Than IntegerValueLow\"); //Check if model value is less than or equal to a value v.AddIsLessThanOrEqualTo(m => m.IntegerValue, 11, \"IntegerValue Not Less Than Or Equal To 11\"); //Check if model value is less than or equal to another model value v.AddIsLessThanOrEqualTo(m => m.IntegerValue, m => m.IntegerValueHigh, \"IntegerValue Not Less Than Or Equal To IntegerValueHigh\"); //Check if model value is less than a value v.AddIsLessThan(m => m.IntegerValue, 11, \"IntegerValue Not Less Than 11\"); //Check if model value is less than another model value v.AddIsLessThan(m => m.IntegerValue, m => m.IntegerValueHigh, \"IntegerValue Not Less Than IntegerValueHigh\"); Numeric Object Validation If you need to validate if an object is numeric or not use the following. //Check if model value is numeric type v.AddIsNumeric(m => m.IntegerValue, \"IntegerValue Is Not Numeric\"); //Check if model value string can be parsed to numeric type v.AddIsNumeric(m => m.StringNumeric, \"StringNumeric Is Not Numeric\"); Email Validation If you need to do any sort of email address validation use the following. //Check if model string value can be parsed to MailAddress object v.AddIsMailAddress(m => m.Email, \"Email Is Not Mail Address\"); //Check if model string value can be parsed to MailAddress object and is in allowed domain list. v.AddIsInDomain(m => m.Email, new string[] { \"testdomain.com\" }, \"Email is not in allowed domains\"); //Check if model MailAddress object is in allowed domain list. v.AddIsInDomain(m => m.MailAddress, new string[] { \"testdomain.com\" }, \"MailAddress is not in allowed domains\"); //Check if model string value can be parsed to MailAddress object and is not in unallowed domain list. v.AddIsNotInDomain(m => m.Email, new string[] { \"baddomain.com\" }, \"Email is in unallowed domains\"); //Check if model MailAddress object is not in unallowed domain list. v.AddIsNotInDomain(m => m.MailAddress, new string[] { \"baddomain.com\" }, \"MailAddress is in unallowed domains\"); General String Validation If you need to do any sort of general string validation use the following. //Check if model string value length is at or below max lenth allowed v.AddHasMaxLength(m => m.MyString, 10, \"MyString too long\"); //Check if model string value length is at or above min lenth allowed v.AddHasMinLength(m => m.MyString, 10, \"MyString too short\"); //Check if model string value is a digit only string of a given length v.AddIsNDigitString(m => m.StringNumeric, 10, \"StringNumeric Is Not 10 Digit String\"); //Check if model string value is null v.AddIsNull(m => m.StringNull, \"StringNull Is Not Null\"); //Check if model string value is null or empty v.AddIsNullOrEmpty(m => m.StringEmpty, \"StringEmpty Is Not Null Or Empty\"); //Check if model string value is null or whitespace v.AddIsNullOrWhiteSpace(m => m.StringWhiteSpace, \"StringWhiteSpace Is Not Null Or White Space\"); //Check if model string value is not null (useful for checking required) v.AddIsNotNull(m => m.MyString, \"MyString Is Null\"); //Check if model string value is not null or empty (useful for checking required) v.AddIsNotNullOrEmpty(m => m.MyString, \"MyString Is Null Or Empty\"); //Check if model string value is not null or whitespace (useful for checking required) v.AddIsNotNullOrWhiteSpace(m => m.MyString, \"MyString Is Null Or White Space\"); Regex String Validation If you have a specialized string validation done via Regex use the following. string regexAlphanumeric = @\"^[a-zA-Z0-9\\s,]*$\"; Regex rg = new Regex(regexAlphanumeric); //Check if model value matches regex string v.AddIsRegexMatch(m => m.StringAlphaNumeric, regexAlphanumeric, \"Is Not alphanumeric\"); //Check if model value matches regex object v.AddIsRegexMatch(m => m.StringAlphaNumeric, rg, \"Is Not alphanumeric\"); //Check if model value matches regex string with options v.AddIsRegexMatch(m => m.StringAlphaNumeric, regexAlphanumeric, RegexOptions.None, \"Is Not alphanumeric\"); Custom Model Validation If you have a custom model validation method use the following. v.Add(m => m.CustomCheck(), \"Does Not Pass Custom Check\"); Adding Custom Validation Extensions If you have a custom model validation method that you want to be made available for common use in your project, you can do the following. Create the extension class method internal static class CustomValidatorExtensions { private static Regex AlphaNumericRegex = new Regex(@\"^[a-zA-Z0-9\\s,]*$\"); public static void AddIsAlphaNumeric<T>(this Validator<T> validator, Func<T, string> getValue, string parameterName) where T : class => validator.Add(m => AlphaNumericRegex.Match(getValue(m)).Success, $\"{parameterName} is not alphanumeric\"); } Use extension class method v.AddIsAlphaNumeric(m => m.StringAlphaNumeric, \"StringAlphaNumeric\"); Validation When Binding Multiple Expected Parameter Model Types If you are binding multiple parameter model types and wish to validate you can do the following. Note When you declare model validation for one expected model type you must also declare it for all expected types. Otherwise you will recieve a validation error. IDbCommandMethod myEndpointWithValidationMultipleExpectedTypes = dbConnectionConfig.DefineEndpoint(\"MyEndpoint\", o => { //... //Set first accepted Parameter Type o.WithParameters<MyParametersModel>(p => { p.AddInput(\"ParameterA\", model => model.ParameterA); p.AddInput(\"ParameterB\", model => model.ParameterB); }) //Set second accepted Parameter Type .WithParameters<MyParametersModelOther>(p => { p.AddInput(\"ParameterA\", model => model.ParameterOne); p.AddInput(\"ParameterB\", model => model.ParameterTwo); }) // Set Common parameters .WithParameters(p => { p.AddInput(\"ParameterC\", \"SomeHardedCodedValue\"); }) .WithValidation<MyParametersModel>(v => { //Implement first accepted Model type Validation here }) .WithValidation<MyParametersModelOther>(v => { //Implement second accepted Model type Validation here }); //... });"
  },
  "GettingStarted/UsingSchemas.html": {
    "href": "GettingStarted/UsingSchemas.html",
    "title": "Using Schemas | DbFacade",
    "summary": "Using Schemas If you have stored procedures defined in in its own Schema like 'dbo' then you can define a new Schema object as follows Schema MySchema = DbConnectionConfig.CreateSchema(\"MySchema\"); Then define endpoints as usual. You do not have to fully qualify the stored procedure name. IDbCommandMethod MyEndpoint = MySchema.DefineEndpoint(\"MyEndpoint\", o => { o.AsStoredProcedure(\"MyEndpointStoredProcedureName\") .WithParameters<MyParametersModel>(p => { p.AddInput(\"ParameterA\", model => model.ParameterA); p.AddInput(\"ParameterB\", model => model.ParameterB); }) .WithValidation<MyParametersModel>(v => { v.AddIsNotNullOrWhiteSpace(m => m.ParameterA, \"ParameterA is required.\"); }); }); Best Practice 'DbConnectionConfig' instances already provide a Dbo default Schema so when defining stored procedure endpoints that target the dbo schema in your database use the following. IDbCommandMethod MyEndpoint = DbConnectionConfig.Dbo.DefineEndpoint(\"MyEndpoint\", o => { o.AsStoredProcedure(\"MyEndpointStoredProcedureName\") .WithParameters<MyParametersModel>(p => { p.AddInput(\"ParameterA\", model => model.ParameterA); p.AddInput(\"ParameterB\", model => model.ParameterB); }) .WithValidation<MyParametersModel>(v => { v.AddIsNotNullOrWhiteSpace(m => m.ParameterA, \"ParameterA is required.\"); }); });"
  },
  "GettingStarted/index.html": {
    "href": "GettingStarted/index.html",
    "title": "Installation | DbFacade",
    "summary": "Installation Install-Package DbFacade The latest version can also be downloaded directly from NuGet.org at: https://www.nuget.org/packages/DbFacade/ Connection Type Helpers For support with the following data base types please additionally install the following helpers packages. Oracle Install-Package DbFacade.Oracle SQLite Install-Package DbFacade.SQLite Odbc Install-Package DbFacade.Odbc OleDb Install-Package DbFacade.OleDb"
  },
  "RealisticExample/docs/database/dbo/StoredProcedures/UpdateEmployee.html": {
    "href": "RealisticExample/docs/database/dbo/StoredProcedures/UpdateEmployee.html",
    "title": "| DbFacade",
    "summary": "CREATE PROCEDURE [dbo].[UpdateEmployee] @Guid UNIQUEIDENTIFIER = NULL, @FirstName NVARCHAR(50) = NULL, @MiddleName NVARCHAR(50) = NULL, @LastName NVARCHAR(50) = NULL, @AddressLine1 NVARCHAR(50) = NULL, @AddressLine2 NVARCHAR(20) = NULL, @AddressCity NVARCHAR(20) = NULL, @AddressState NVARCHAR(20) = NULL, @AddressZIP NVARCHAR(5) = NULL, @HomePhone NVARCHAR(10) = NULL, @MobilePhone NVARCHAR(10) = NULL, @Email NVARCHAR(256) = NULL, @ResponseMessage NVARCHAR(MAX) OUTPUT AS DECLARE @ReturnCode INT = 0 BEGIN TRY DECLARE @EmployeeId INT SELECT @EmployeeId = [Id], @TypeName = [Name] FROM [dbo].[Employee] WHERE [Guid] = @Guid UPDATE [E] SET [FirstName] = ISNULL(@FirstName,[FirstName]), [MiddleName] = ISNULL(@MiddleName,[MiddleName]), [LastName] = ISNULL(@LastName,[LastName]), [UpdateDate] = GETDATE() FROM [dbo].[Employee] [E] WHERE [Id] = @EmployeeId IF @@ROWCOUNT = 0 BEGIN INSERT INTO [dbo].[Employee]([FirstName],[MiddleName],[LastName]) VALUES(@FirstName,@MiddleName,@LastName) SET @EmployeeId = SCOPE_IDENTITY() END UPDATE [CI] SET [AddressLine1] = ISNULL(@AddressLine1,[AddressLine1]), [AddressLine2] = ISNULL(@AddressLine2,[AddressLine2]), [AddressCity] = ISNULL(@AddressCity,[AddressCity]), [AddressState] = ISNULL(@AddressState,[AddressState]), [AddressZIP] = ISNULL(@AddressZIP,[AddressZIP]), [HomePhone] = ISNULL(@HomePhone,[HomePhone]), [MobilePhone] = ISNULL(@MobilePhone,[MobilePhone]), [Email] = ISNULL(@Email,[Email]), [UpdateDate] = GETDATE() FROM [dbo].[ContactInfo] [CI] WHERE [EmployeeId] = @EmployeeId IF @@ROWCOUNT = 0 BEGIN INSERT INTO [dbo].[ContactInfo]([EmployeeId],[AddressLine1],[AddressLine2],[AddressCity],[AddressState],[AddressZIP],[HomePhone],[MobilePhone],[Email]) VALUES(@AddressLine1,@AddressLine2,@AddressCity,@AddressState,@AddressZIP,@HomePhone,@MobilePhone,@Email) END SET @ReturnCode = 1 SET @ResponseMessage = 'Successfully updated employee' END TRY BEGIN CATCH SET @ReturnCode = 0 SET @ResponseMessage = ERROR_MESSAGE() END CATCH RETURN @ReturnCode"
  },
  "RealisticExample/docs/database/dbo/Tables/ContactInfo.html": {
    "href": "RealisticExample/docs/database/dbo/Tables/ContactInfo.html",
    "title": "| DbFacade",
    "summary": "CREATE TABLE [dbo].[ContactInfo] ( [Id] INT NOT NULL IDENTITY(1,1) PRIMARY KEY, [Guid] UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL DEFAULT NEWID(), [EmployeeId] INT NOT NULL UNIQUE, [AddressLine1] NVARCHAR(50) NOT NULL, [AddressLine2] NVARCHAR(20) NULL, [AddressCity] NVARCHAR(20) NOT NULL, [AddressState] NVARCHAR(20) NOT NULL, [AddressZIP] NVARCHAR(5) NOT NULL, [HomePhone] NVARCHAR(10) NULL, [MobilePhone] NVARCHAR(10) NULL, [Email] NVARCHAR(256) NULL, [IsActive] BIT NOT NULL DEFAULT(1), [CreateDate] DATETIME NOT NULL DEFAULT GETDATE(), [UpdateDate] DATETIME NULL, CONSTRAINT [FK_ContactInfo_EmployeeId] FOREIGN KEY ([EmployeeId]) REFERENCES [dbo].[Employee]([Id]) )"
  },
  "RealisticExample/docs/database/dbo/Tables/Department.html": {
    "href": "RealisticExample/docs/database/dbo/Tables/Department.html",
    "title": "| DbFacade",
    "summary": "CREATE TABLE [dbo].[Department] ( [Id] INT NOT NULL IDENTITY(1,1) PRIMARY KEY, [Guid] UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL DEFAULT NEWID(), [Code] NVARCHAR(5) UNIQUE NOT NULL, [Name] NVARCHAR(50) NOT NULL, [IsActive] BIT NOT NULL DEFAULT(1), [CreateDate] DATETIME NOT NULL DEFAULT GETDATE(), [UpdateDate] DATETIME NULL )"
  },
  "RealisticExample/docs/database/dbo/Tables/Employee.html": {
    "href": "RealisticExample/docs/database/dbo/Tables/Employee.html",
    "title": "| DbFacade",
    "summary": "CREATE TABLE [dbo].[Employee] ( [Id] INT NOT NULL IDENTITY(1,1) PRIMARY KEY, [Guid] UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL DEFAULT NEWID(), [FirstName] NVARCHAR(50) NOT NULL, [MiddleName] NVARCHAR(50) NULL, [LastName] NVARCHAR(50) NOT NULL, [DepartmentId] INT NOT NULL DEFAULT(1), [IsActive] BIT NOT NULL DEFAULT(1), [CreateDate] DATETIME NOT NULL DEFAULT GETDATE(), [UpdateDate] DATETIME NULL, CONSTRAINT [FK_Employee_DepartmentId] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[Department]([Id]) )"
  },
  "RealisticExample/index.html": {
    "href": "RealisticExample/index.html",
    "title": "Installation | DbFacade",
    "summary": "Installation Install-Package DbFacade The latest version can also be downloaded directly from NuGet.org at: https://www.nuget.org/packages/DbFacade/ Connection Type Helpers For support with the following data base types please additionally install the following helpers packages. Oracle Install-Package DbFacade.Oracle SQLite Install-Package DbFacade.SQLite Odbc Install-Package DbFacade.Odbc OleDb Install-Package DbFacade.OleDb"
  },
  "ReleaseNotes.html": {
    "href": "ReleaseNotes.html",
    "title": "Release Notes | DbFacade",
    "summary": "Release Notes 2.x.x 1.x.x 2.0.0 Completely redesigned archetecture for interfacing with ADO.NET. More Configurable 1.13.0 Issues Resolved Resolved an issue with unit testing feature ruturning empty data sets when executing same call multiple times Additional Notes Bumped NuGet package dependancy versions Added dependancy for NuGet package DbFacade.Utils Add Unit testing feature to allow multiple data sets on single call Refactored DbConnection Configuration pattern 1.12.1 Issues Resolved Resolved an issue with unit testing feature not properly handling annonomous objects as data row values Additional Notes bumped NuGet package dependancy versions 1.12.0 Features Depreciated/Removed Depreciated .NET Core specific nuget package. Separate Non SQL Client connections into separate packages 1.11.0 Features Added Added Access to raw C# 'DataSet' object Added support for defining a credential object for DbConnection types that support it Features Depreciated/Removed Depreciated GetDbConnectionProvider and GetDbConnectionProviderAsync methods from TDbConnectionConfig classes. Replaced with CreateDbConnection method which in most use cases will already be built in. Issues Resolved Resolved issiue with output parameter values being set to null when actual values exist 1.10.0 Features Added Added Ability to define Db Schema command builder factories Added ability to fetch multiple data sets from one db call Added new methods to toggle running connections in Mock mode for unit testing Added Error Details for responses to make it easier to debug issues Features Depreciated/Removed Depreciated IDbCommandMethod Mock/MockAsync calls Depreciated DbCommandConfigFactory method (moved to TDbConnectionConfig class) Issues Resolved Resolved unhandled exceptions thrown in the DbDataModel Init() method. Resolved unhandled exceptions thrown when getting output value from response. 1.9.0 No Release Notes available at this time 1.8.0 No Release Notes available at this time 1.7.0 No Release Notes available at this time 1.6.0 No Release Notes available at this time 1.5.0 No Release Notes available at this time 1.4.0 No Release Notes available at this time 1.3.0 No Release Notes available at this time 1.2.0 No Release Notes available at this time 1.1.0 No Release Notes available at this time 1.0.0 No Release Notes available at this time"
  },
  "TestCoverage.html": {
    "href": "TestCoverage.html",
    "title": "| DbFacade",
    "summary": ""
  },
  "api/DbFacade.DataLayer.CommandConfig.IDbCommandMethod.html": {
    "href": "api/DbFacade.DataLayer.CommandConfig.IDbCommandMethod.html",
    "title": "Interface IDbCommandMethod | DbFacade",
    "summary": "Interface IDbCommandMethod Namespace DbFacade.DataLayer.CommandConfig Assembly DbFacade2.dll public interface IDbCommandMethod Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) DbCommandMethodExtensions.ExecuteAndFetchFirstAsync<T>(IDbCommandMethod) DbCommandMethodExtensions.ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, Action<T, IDataCollection>) DbCommandMethodExtensions.ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, object) DbCommandMethodExtensions.ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, object, Action<T, IDataCollection>) DbCommandMethodExtensions.ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, CancellationToken) DbCommandMethodExtensions.ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, CancellationToken, Action<T, IDataCollection>) DbCommandMethodExtensions.ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, CancellationToken, object) DbCommandMethodExtensions.ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, CancellationToken, object, Action<T, IDataCollection>) DbCommandMethodExtensions.ExecuteAndFetchFirst<T>(IDbCommandMethod, Action<T, IDataCollection>, out IEnumerable<T>) DbCommandMethodExtensions.ExecuteAndFetchFirst<T>(IDbCommandMethod, out IEnumerable<T>) DbCommandMethodExtensions.ExecuteAndFetchFirst<T>(IDbCommandMethod, object, Action<T, IDataCollection>, out IEnumerable<T>) DbCommandMethodExtensions.ExecuteAndFetchFirst<T>(IDbCommandMethod, object, out IEnumerable<T>) Methods DisableMockMode() Disables the mock mode. void DisableMockMode() EnableMockMode(Action<IMockResponse>) Enables the mock mode. void EnableMockMode(Action<IMockResponse> setMockData) Parameters setMockData Action<IMockResponse> Execute(object) Executes the specified parameters. IDbResponse Execute(object parameters = null) Parameters parameters object The parameters. Returns IDbResponse ExecuteAsync(object) Executes the asynchronous. Task<IDbResponse> ExecuteAsync(object parameters = null) Parameters parameters object The parameters. Returns Task<IDbResponse> ExecuteAsync(CancellationToken, object) Executes the asynchronous. Task<IDbResponse> ExecuteAsync(CancellationToken cancellationToken, object parameters = null) Parameters cancellationToken CancellationToken The cancellation token. parameters object The parameters. Returns Task<IDbResponse>"
  },
  "api/DbFacade.DataLayer.CommandConfig.html": {
    "href": "api/DbFacade.DataLayer.CommandConfig.html",
    "title": "Namespace DbFacade.DataLayer.CommandConfig | DbFacade",
    "summary": "Namespace DbFacade.DataLayer.CommandConfig Interfaces IDbCommandMethod"
  },
  "api/DbFacade.DataLayer.ConnectionService.DbConnectionConfig.html": {
    "href": "api/DbFacade.DataLayer.ConnectionService.DbConnectionConfig.html",
    "title": "Class DbConnectionConfig | DbFacade",
    "summary": "Class DbConnectionConfig Namespace DbFacade.DataLayer.ConnectionService Assembly DbFacade2.dll public sealed class DbConnectionConfig Inheritance object DbConnectionConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) DbConnectionConfigExtensions.CreateSchema(DbConnectionConfig, string) DbConnectionConfigExtensions.DefineEndpoint(DbConnectionConfig, string, Action<EndpointSettings>) Fields Dbo The dbo public readonly Schema Dbo Field Value Schema Methods Create(IDbConnectionProvider) Creates the specified database connection provider. public static DbConnectionConfig Create(IDbConnectionProvider dbConnectionProvider) Parameters dbConnectionProvider IDbConnectionProvider The database connection provider. Returns DbConnectionConfig"
  },
  "api/DbFacade.DataLayer.ConnectionService.DbExecutionExceptionType.html": {
    "href": "api/DbFacade.DataLayer.ConnectionService.DbExecutionExceptionType.html",
    "title": "Enum DbExecutionExceptionType | DbFacade",
    "summary": "Enum DbExecutionExceptionType Namespace DbFacade.DataLayer.ConnectionService Assembly DbFacade2.dll public enum DbExecutionExceptionType Fields DbExecutionError = 1 Error = 4 FacadeException = 0 OperationCanceledException = 3 ValidationError = 2"
  },
  "api/DbFacade.DataLayer.ConnectionService.EndpointErrorInfo.html": {
    "href": "api/DbFacade.DataLayer.ConnectionService.EndpointErrorInfo.html",
    "title": "Class EndpointErrorInfo | DbFacade",
    "summary": "Class EndpointErrorInfo Namespace DbFacade.DataLayer.ConnectionService Assembly DbFacade2.dll public class EndpointErrorInfo Inheritance object EndpointErrorInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Fields ErrorData The error data public readonly DataCollection ErrorData Field Value DataCollection Properties EndpointSettings Gets the endpoint settings. public EndpointSettings EndpointSettings { get; } Property Value EndpointSettings The endpoint settings. Error Gets the error. public Exception Error { get; } Property Value Exception The error. ErrorDetails Gets the error details. public string ErrorDetails { get; } Property Value string The error details. ErrorMessage Gets the error message. public string ErrorMessage { get; } Property Value string The error message. ExceptionType Gets the type of the exception. public DbExecutionExceptionType ExceptionType { get; } Property Value DbExecutionExceptionType The type of the exception. Parameters Gets the parameters. public object Parameters { get; } Property Value object The parameters."
  },
  "api/DbFacade.DataLayer.ConnectionService.IDbConnectionProvider.html": {
    "href": "api/DbFacade.DataLayer.ConnectionService.IDbConnectionProvider.html",
    "title": "Interface IDbConnectionProvider | DbFacade",
    "summary": "Interface IDbConnectionProvider Namespace DbFacade.DataLayer.ConnectionService Assembly DbFacade2.dll public interface IDbConnectionProvider Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Properties DbConnectionConfig DbConnectionConfig DbConnectionConfig { get; } Property Value DbConnectionConfig DbTypeCollection DbTypeCollection DbTypeCollection { get; } Property Value DbTypeCollection Methods BeginTransaction(IDbConnection, IsolationLevel) IDbTransaction BeginTransaction(IDbConnection connection, IsolationLevel isolationLevel) Parameters connection IDbConnection isolationLevel IsolationLevel Returns IDbTransaction BeginTransactionAsync(IDbConnection, CancellationToken, IsolationLevel) Task<IDbTransaction> BeginTransactionAsync(IDbConnection connection, CancellationToken cancellationToken, IsolationLevel isolationLevel) Parameters connection IDbConnection cancellationToken CancellationToken isolationLevel IsolationLevel Returns Task<IDbTransaction> BindConnectionString(Func<string, string>) void BindConnectionString(Func<string, string> getConnectionString) Parameters getConnectionString Func<string, string> BindConnectionString(string) void BindConnectionString(string connectionString) Parameters connectionString string BindErrorHandler(Action<EndpointErrorInfo>) void BindErrorHandler(Action<EndpointErrorInfo> errorHandler) Parameters errorHandler Action<EndpointErrorInfo> CanExecuteXmlReader(IDbCommand) bool CanExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns bool ExecuteNonQuery(IDbCommand) int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQueryAsync(IDbCommand, CancellationToken) Task<int> ExecuteNonQueryAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<int> ExecuteReader(IDbCommand) DbDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns DbDataReader ExecuteReaderAsync(IDbCommand, CancellationToken) Task<DbDataReader> ExecuteReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<DbDataReader> ExecuteScalar(IDbCommand) object ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object ExecuteScalarAsync(IDbCommand, CancellationToken) Task<object> ExecuteScalarAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<object> ExecuteXmlReader(IDbCommand) XmlReader ExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns XmlReader ExecuteXmlReaderAsync(IDbCommand, CancellationToken) Task<XmlReader> ExecuteXmlReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<XmlReader> GetDbConnection(string) IDbConnection GetDbConnection(string conectionStringId) Parameters conectionStringId string Returns IDbConnection GetDbDataAdapter() IDbDataAdapter GetDbDataAdapter() Returns IDbDataAdapter OnError(EndpointErrorInfo) void OnError(EndpointErrorInfo info) Parameters info EndpointErrorInfo ResolveParameterName(string, bool) string ResolveParameterName(string name, bool useFullParameterName) Parameters name string useFullParameterName bool Returns string"
  },
  "api/DbFacade.DataLayer.ConnectionService.SqlDbConnectionProvider.html": {
    "href": "api/DbFacade.DataLayer.ConnectionService.SqlDbConnectionProvider.html",
    "title": "Class SqlDbConnectionProvider | DbFacade",
    "summary": "Class SqlDbConnectionProvider Namespace DbFacade.DataLayer.ConnectionService Assembly DbFacade2.dll public class SqlDbConnectionProvider : IDbConnectionProvider Inheritance object SqlDbConnectionProvider Implements IDbConnectionProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors SqlDbConnectionProvider() public SqlDbConnectionProvider() Properties DbConnectionConfig public DbConnectionConfig DbConnectionConfig { get; } Property Value DbConnectionConfig DbTypeCollection public DbTypeCollection DbTypeCollection { get; } Property Value DbTypeCollection Methods BeginTransaction(IDbConnection, IsolationLevel) public IDbTransaction BeginTransaction(IDbConnection connection, IsolationLevel isolationLevel) Parameters connection IDbConnection isolationLevel IsolationLevel Returns IDbTransaction BeginTransactionAsync(IDbConnection, CancellationToken, IsolationLevel) public Task<IDbTransaction> BeginTransactionAsync(IDbConnection connection, CancellationToken cancellationToken, IsolationLevel isolationLevel) Parameters connection IDbConnection cancellationToken CancellationToken isolationLevel IsolationLevel Returns Task<IDbTransaction> BindConnectionString(Func<string, string>) public void BindConnectionString(Func<string, string> getConnectionString) Parameters getConnectionString Func<string, string> BindConnectionString(string) public void BindConnectionString(string connectionString) Parameters connectionString string BindCredentials(SqlCredential) public void BindCredentials(SqlCredential credential) Parameters credential SqlCredential BindCredentials(string, string) public void BindCredentials(string username, string password) Parameters username string password string BindErrorHandler(Action<EndpointErrorInfo>) public void BindErrorHandler(Action<EndpointErrorInfo> errorHandler) Parameters errorHandler Action<EndpointErrorInfo> CanExecuteXmlReader(IDbCommand) public bool CanExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns bool ExecuteNonQuery(IDbCommand) public int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQueryAsync(IDbCommand, CancellationToken) public Task<int> ExecuteNonQueryAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<int> ExecuteReader(IDbCommand) public DbDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns DbDataReader ExecuteReaderAsync(IDbCommand, CancellationToken) public Task<DbDataReader> ExecuteReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<DbDataReader> ExecuteScalar(IDbCommand) public object ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object ExecuteScalarAsync(IDbCommand, CancellationToken) public Task<object> ExecuteScalarAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<object> ExecuteXmlReader(IDbCommand) public XmlReader ExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns XmlReader ExecuteXmlReaderAsync(IDbCommand, CancellationToken) public Task<XmlReader> ExecuteXmlReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<XmlReader> GetDbConnection(string) public IDbConnection GetDbConnection(string connectionStringId) Parameters connectionStringId string Returns IDbConnection GetDbDataAdapter() public IDbDataAdapter GetDbDataAdapter() Returns IDbDataAdapter OnError(EndpointErrorInfo) public void OnError(EndpointErrorInfo info) Parameters info EndpointErrorInfo ResolveParameterName(string, bool) public string ResolveParameterName(string name, bool useFullParameterName) Parameters name string useFullParameterName bool Returns string"
  },
  "api/DbFacade.DataLayer.ConnectionService.html": {
    "href": "api/DbFacade.DataLayer.ConnectionService.html",
    "title": "Namespace DbFacade.DataLayer.ConnectionService | DbFacade",
    "summary": "Namespace DbFacade.DataLayer.ConnectionService Classes DbConnectionConfig EndpointErrorInfo SqlDbConnectionProvider Interfaces IDbConnectionProvider Enums DbExecutionExceptionType"
  },
  "api/DbFacade.DataLayer.Models.DataCollection.html": {
    "href": "api/DbFacade.DataLayer.Models.DataCollection.html",
    "title": "Class DataCollection | DbFacade",
    "summary": "Class DataCollection Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public sealed class DataCollection : IDataCollection Inheritance object DataCollection Implements IDataCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) DbDataCollectionExtensions.GetValue<T>(IDataCollection, string, T) DbDataCollectionExtensions.ToBoolean<T>(IDataCollection, string, T) DbDataCollectionExtensions.ToDateTime(IDataCollection, string, string, DateTimeStyles) DbDataCollectionExtensions.ToDateTime(IDataCollection, string, string, IFormatProvider, DateTimeStyles) DbDataCollectionExtensions.ToDateTimeString(IDataCollection, string, string) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Action<T, IDataCollection>) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Func<T>) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Func<T>, Action<T, IDataCollection>) DbDataCollectionExtensions.ToEnumerable<T>(IDataCollection, string, char) Properties this[int] Gets the object with the specified column index. public object this[int columnIndex] { get; } Parameters columnIndex int Index of the column. Property Value object The object. this[string] Gets the object with the specified column name. public object this[string columnName] { get; set; } Parameters columnName string Name of the column. Property Value object The object. Keys Gets the keys. public string[] Keys { get; } Property Value string[] The keys."
  },
  "api/DbFacade.DataLayer.Models.DbTypeCollection.html": {
    "href": "api/DbFacade.DataLayer.Models.DbTypeCollection.html",
    "title": "Class DbTypeCollection | DbFacade",
    "summary": "Class DbTypeCollection Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public sealed class DbTypeCollection Inheritance object DbTypeCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Methods Add<T>(DbType) public void Add<T>(DbType dbType) Parameters dbType DbType Type Parameters T Add<T>(DbType, Func<T, object>) public void Add<T>(DbType dbType, Func<T, object> valueResolver) Parameters dbType DbType valueResolver Func<T, object> Type Parameters T Create() public static DbTypeCollection Create() Returns DbTypeCollection"
  },
  "api/DbFacade.DataLayer.Models.EndpointSettings.html": {
    "href": "api/DbFacade.DataLayer.Models.EndpointSettings.html",
    "title": "Class EndpointSettings | DbFacade",
    "summary": "Class EndpointSettings Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public class EndpointSettings Inheritance object EndpointSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) EndpointSettingsExtensions.AsNonQuery(EndpointSettings, params Func<object, string>[]) EndpointSettingsExtensions.AsNonQuery(EndpointSettings, params string[]) EndpointSettingsExtensions.AsQuery(EndpointSettings, params Func<object, string>[]) EndpointSettingsExtensions.AsQuery(EndpointSettings, params string[]) EndpointSettingsExtensions.AsScalar(EndpointSettings, Func<object, string>) EndpointSettingsExtensions.AsScalar(EndpointSettings, string) EndpointSettingsExtensions.AsStoredProcedure(EndpointSettings, string) EndpointSettingsExtensions.AsTableDirect(EndpointSettings, string) EndpointSettingsExtensions.AsTransaction(EndpointSettings, IsolationLevel) EndpointSettingsExtensions.AsXml(EndpointSettings, Func<object, string>, XmlReadMode) EndpointSettingsExtensions.AsXml(EndpointSettings, string, XmlReadMode) EndpointSettingsExtensions.BindErrorHandler(EndpointSettings, Action<EndpointErrorInfo>) EndpointSettingsExtensions.BindOnBeforeExecute(EndpointSettings, Action<IDbCommand, object>) EndpointSettingsExtensions.BindOnBeforeExecuteAsync(EndpointSettings, Func<IDbCommand, object, CancellationToken, Task>) EndpointSettingsExtensions.WithParameters(EndpointSettings, Action<ParameterDataCollection>) EndpointSettingsExtensions.WithParameters<T>(EndpointSettings, Action<ParameterDataCollection<T>>) EndpointSettingsExtensions.WithParameters<T>(EndpointSettings, Action<T, ParameterDataCollection>) EndpointSettingsExtensions.WithValidation<T>(EndpointSettings, Action<Validator<T>>) Properties ConnectionStringId Gets or sets the connection string identifier. public string ConnectionStringId { get; set; } Property Value string The connection string identifier."
  },
  "api/DbFacade.DataLayer.Models.IDataCollection.html": {
    "href": "api/DbFacade.DataLayer.Models.IDataCollection.html",
    "title": "Interface IDataCollection | DbFacade",
    "summary": "Interface IDataCollection Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public interface IDataCollection Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) DbDataCollectionExtensions.GetValue<T>(IDataCollection, string, T) DbDataCollectionExtensions.ToBoolean<T>(IDataCollection, string, T) DbDataCollectionExtensions.ToDateTime(IDataCollection, string, string, DateTimeStyles) DbDataCollectionExtensions.ToDateTime(IDataCollection, string, string, IFormatProvider, DateTimeStyles) DbDataCollectionExtensions.ToDateTimeString(IDataCollection, string, string) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Action<T, IDataCollection>) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Func<T>) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Func<T>, Action<T, IDataCollection>) DbDataCollectionExtensions.ToEnumerable<T>(IDataCollection, string, char) Properties this[int] Gets the object with the specified column index. object this[int columnIndex] { get; } Parameters columnIndex int Index of the column. Property Value object The object. this[string] Gets the object with the specified column name. object this[string columnName] { get; } Parameters columnName string Name of the column. Property Value object The object. Keys Gets the keys. string[] Keys { get; } Property Value string[] The keys."
  },
  "api/DbFacade.DataLayer.Models.IDbDataModel.html": {
    "href": "api/DbFacade.DataLayer.Models.IDbDataModel.html",
    "title": "Interface IDbDataModel | DbFacade",
    "summary": "Interface IDbDataModel Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public interface IDbDataModel Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Methods Init(IDataCollection) Initializes the specified collection. void Init(IDataCollection collection) Parameters collection IDataCollection The collection."
  },
  "api/DbFacade.DataLayer.Models.IDbDataTable.html": {
    "href": "api/DbFacade.DataLayer.Models.IDbDataTable.html",
    "title": "Interface IDbDataTable | DbFacade",
    "summary": "Interface IDbDataTable Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public interface IDbDataTable Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Methods ToDbDataModelList<T>() Converts to dbdatamodellist. IEnumerable<T> ToDbDataModelList<T>() where T : class, IDbDataModel Returns IEnumerable<T> Type Parameters T ToDbDataModelList<T>(Action<T, IDataCollection>) Converts to dbdatamodellist. IEnumerable<T> ToDbDataModelList<T>(Action<T, IDataCollection> initialize) where T : class Parameters initialize Action<T, IDataCollection> The initialize. Returns IEnumerable<T> Type Parameters T"
  },
  "api/DbFacade.DataLayer.Models.IDbResponse.html": {
    "href": "api/DbFacade.DataLayer.Models.IDbResponse.html",
    "title": "Interface IDbResponse | DbFacade",
    "summary": "Interface IDbResponse Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public interface IDbResponse Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) DbResponseExtensions.ToDbDataModelList<T>(IDbResponse, Action<T, IDataCollection>, int) DbResponseExtensions.ToDbDataModelList<T>(IDbResponse, int) Properties DataSet Gets the data set. DataSet DataSet { get; } Property Value DataSet The data set. DbDataTables Gets the data sets. IEnumerable<IDbDataTable> DbDataTables { get; } Property Value IEnumerable<IDbDataTable> The data sets. ErrorInfo Gets the error information. EndpointErrorInfo ErrorInfo { get; } Property Value EndpointErrorInfo The error information. HasError Gets a value indicating whether this instance has error. bool HasError { get; } Property Value bool true if this instance has error; otherwise, false. ReturnValue Gets the return value. int ReturnValue { get; } Property Value int The return value. ScalarReturnValue Gets the scalar return value. object ScalarReturnValue { get; } Property Value object The scalar return value. Methods GetOutputModel<T>() Gets the output model. T GetOutputModel<T>() where T : class, IDbDataModel Returns T Type Parameters T GetOutputModel<T>(Action<T, IDataCollection>) Gets the output model. T GetOutputModel<T>(Action<T, IDataCollection> initialize) where T : class Parameters initialize Action<T, IDataCollection> The initialize. Returns T Type Parameters T GetOutputValue(string) Gets the output value. object GetOutputValue(string key) Parameters key string The key. Returns object GetOutputValue<T>(string) Gets the output value. T GetOutputValue<T>(string key) Parameters key string The key. Returns T Type Parameters T"
  },
  "api/DbFacade.DataLayer.Models.IMockResponse.html": {
    "href": "api/DbFacade.DataLayer.Models.IMockResponse.html",
    "title": "Interface IMockResponse | DbFacade",
    "summary": "Interface IMockResponse Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public interface IMockResponse Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Properties OutputValues Gets the output values. DataCollection OutputValues { get; } Property Value DataCollection The output values. ReturnValue Gets or sets the return value. int ReturnValue { get; set; } Property Value int The return value. ScalarReturnValue Gets or sets the scalar value. object ScalarReturnValue { get; set; } Property Value object The scalar value. Settings Gets the settings. MockResponseSettings Settings { get; } Property Value MockResponseSettings The settings. Methods Add<T>(IEnumerable<T>) Adds the response data. void Add<T>(IEnumerable<T> responseData) where T : class Parameters responseData IEnumerable<T> The response data. Type Parameters T Add<T>(params T[]) Adds the response data. void Add<T>(params T[] responseData) where T : class Parameters responseData T[] The response data. Type Parameters T Clear() Clears this instance. void Clear()"
  },
  "api/DbFacade.DataLayer.Models.MockResponseSettings.html": {
    "href": "api/DbFacade.DataLayer.Models.MockResponseSettings.html",
    "title": "Class MockResponseSettings | DbFacade",
    "summary": "Class MockResponseSettings Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public class MockResponseSettings Inheritance object MockResponseSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Properties BeginTransactionError Gets or sets the begin transaction error. public string BeginTransactionError { get; set; } Property Value string The begin transaction error. ConnectionCreationError Gets or sets the connection creation error. public string ConnectionCreationError { get; set; } Property Value string The connection creation error. ConnectionOpenError Gets or sets the connection open error. public string ConnectionOpenError { get; set; } Property Value string The connection open error. ExecuteNonQueryError Gets or sets the execute non query error. public string ExecuteNonQueryError { get; set; } Property Value string The execute non query error. ExecuteQueryError Gets or sets the execute query error. public string ExecuteQueryError { get; set; } Property Value string The execute query error. ExecuteScalarError Gets or sets the execute scalar error. public string ExecuteScalarError { get; set; } Property Value string The execute scalar error. ExecuteXmlError Gets or sets the execute XML error. public string ExecuteXmlError { get; set; } Property Value string The execute XML error. TransactionRollbackError Gets or sets the transaction rollback error. public string TransactionRollbackError { get; set; } Property Value string The transaction rollback error. UseNullConnection Gets or sets a value indicating whether [use null connection]. public bool UseNullConnection { get; set; } Property Value bool true if [use null connection]; otherwise, false. UseNullTransaction Gets or sets a value indicating whether [use null transaction]. public bool UseNullTransaction { get; set; } Property Value bool true if [use null transaction]; otherwise, false. XmlReaderSettings Gets the XML reader settings. public XmlReaderSettings XmlReaderSettings { get; } Property Value XmlReaderSettings The XML reader settings."
  },
  "api/DbFacade.DataLayer.Models.ParameterDataCollection-1.html": {
    "href": "api/DbFacade.DataLayer.Models.ParameterDataCollection-1.html",
    "title": "Class ParameterDataCollection<TModel> | DbFacade",
    "summary": "Class ParameterDataCollection<TModel> Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public sealed class ParameterDataCollection<TModel> where TModel : class Type Parameters TModel Inheritance object ParameterDataCollection<TModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Methods AddInput(string, Func<TModel, object>) public void AddInput(string columnName, Func<TModel, object> getter) Parameters columnName string getter Func<TModel, object> AddInput(string, object) public void AddInput(string columnName, object value) Parameters columnName string value object AddInputOutput(string, Func<TModel, object>, int?) public void AddInputOutput(string columnName, Func<TModel, object> getter, int? size = null) Parameters columnName string getter Func<TModel, object> size int? AddInputOutput(string, object, int?) public void AddInputOutput(string columnName, object value, int? size = null) Parameters columnName string value object size int? AddOutput<TCol>(string, int?) public void AddOutput<TCol>(string columnName, int? size = null) Parameters columnName string size int? Type Parameters TCol BindInput() public void BindInput() BindInput<TAttribute>() public void BindInput<TAttribute>() where TAttribute : Attribute Type Parameters TAttribute"
  },
  "api/DbFacade.DataLayer.Models.ParameterDataCollection.html": {
    "href": "api/DbFacade.DataLayer.Models.ParameterDataCollection.html",
    "title": "Class ParameterDataCollection | DbFacade",
    "summary": "Class ParameterDataCollection Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public sealed class ParameterDataCollection : IDataCollection Inheritance object ParameterDataCollection Implements IDataCollection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods DbDataCollectionExtensions.GetValue<T>(IDataCollection, string, T) DbDataCollectionExtensions.ToBoolean<T>(IDataCollection, string, T) DbDataCollectionExtensions.ToDateTime(IDataCollection, string, string, DateTimeStyles) DbDataCollectionExtensions.ToDateTime(IDataCollection, string, string, IFormatProvider, DateTimeStyles) DbDataCollectionExtensions.ToDateTimeString(IDataCollection, string, string) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Action<T, IDataCollection>) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Func<T>) DbDataCollectionExtensions.ToDbDataModel<T>(IDataCollection, Func<T>, Action<T, IDataCollection>) DbDataCollectionExtensions.ToEnumerable<T>(IDataCollection, string, char) AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Properties this[int] Gets the object with the specified column index. public object this[int columnIndex] { get; } Parameters columnIndex int Index of the column. Property Value object The object. this[string] Gets the object with the specified column name. public object this[string columnName] { get; } Parameters columnName string Name of the column. Property Value object The object. Keys Gets the keys. public string[] Keys { get; } Property Value string[] The keys. Methods AddInput(string, object) public void AddInput(string columnName, object value) Parameters columnName string value object AddInputOutput(string, object, int?) public void AddInputOutput(string columnName, object value, int? size = null) Parameters columnName string value object size int? AddInputOutput<TModel>(string, TModel, Func<TModel, object>, int?) public void AddInputOutput<TModel>(string columnName, TModel data, Func<TModel, object> getter, int? size = null) where TModel : class Parameters columnName string data TModel getter Func<TModel, object> size int? Type Parameters TModel AddInput<TModel>(string, TModel, Func<TModel, object>) public void AddInput<TModel>(string columnName, TModel data, Func<TModel, object> getter) where TModel : class Parameters columnName string data TModel getter Func<TModel, object> Type Parameters TModel AddOutput<TCol>(string, int?) public void AddOutput<TCol>(string columnName, int? size = null) Parameters columnName string size int? Type Parameters TCol"
  },
  "api/DbFacade.DataLayer.Models.Parameters.AnsiString.html": {
    "href": "api/DbFacade.DataLayer.Models.Parameters.AnsiString.html",
    "title": "Class AnsiString | DbFacade",
    "summary": "Class AnsiString Namespace DbFacade.DataLayer.Models.Parameters Assembly DbFacade2.dll public sealed class AnsiString Inheritance object AnsiString Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors AnsiString(string) public AnsiString(string value) Parameters value string Fields Value public readonly string Value Field Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DbFacade.DataLayer.Models.Parameters.AnsiStringFixedLength.html": {
    "href": "api/DbFacade.DataLayer.Models.Parameters.AnsiStringFixedLength.html",
    "title": "Class AnsiStringFixedLength | DbFacade",
    "summary": "Class AnsiStringFixedLength Namespace DbFacade.DataLayer.Models.Parameters Assembly DbFacade2.dll public sealed class AnsiStringFixedLength Inheritance object AnsiStringFixedLength Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors AnsiStringFixedLength(string) public AnsiStringFixedLength(string value) Parameters value string Fields Value public readonly string Value Field Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DbFacade.DataLayer.Models.Parameters.Currency.html": {
    "href": "api/DbFacade.DataLayer.Models.Parameters.Currency.html",
    "title": "Class Currency | DbFacade",
    "summary": "Class Currency Namespace DbFacade.DataLayer.Models.Parameters Assembly DbFacade2.dll public sealed class Currency Inheritance object Currency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors Currency(decimal) public Currency(decimal value) Parameters value decimal Fields Value public readonly decimal Value Field Value decimal Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DbFacade.DataLayer.Models.Parameters.StringFixedLength.html": {
    "href": "api/DbFacade.DataLayer.Models.Parameters.StringFixedLength.html",
    "title": "Class StringFixedLength | DbFacade",
    "summary": "Class StringFixedLength Namespace DbFacade.DataLayer.Models.Parameters Assembly DbFacade2.dll public sealed class StringFixedLength Inheritance object StringFixedLength Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors StringFixedLength(string) public StringFixedLength(string value) Parameters value string Fields Value public readonly string Value Field Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/DbFacade.DataLayer.Models.Parameters.html": {
    "href": "api/DbFacade.DataLayer.Models.Parameters.html",
    "title": "Namespace DbFacade.DataLayer.Models.Parameters | DbFacade",
    "summary": "Namespace DbFacade.DataLayer.Models.Parameters Classes AnsiString AnsiStringFixedLength Currency StringFixedLength"
  },
  "api/DbFacade.DataLayer.Models.Schema.html": {
    "href": "api/DbFacade.DataLayer.Models.Schema.html",
    "title": "Class Schema | DbFacade",
    "summary": "Class Schema Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public class Schema Inheritance object Schema Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) DbConnectionConfigExtensions.DefineEndpoint(Schema, string, Action<EndpointSettings>)"
  },
  "api/DbFacade.DataLayer.Models.Validator-1.html": {
    "href": "api/DbFacade.DataLayer.Models.Validator-1.html",
    "title": "Class Validator<T> | DbFacade",
    "summary": "Class Validator<T> Namespace DbFacade.DataLayer.Models Assembly DbFacade2.dll public sealed class Validator<T> where T : class Type Parameters T Inheritance object Validator<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) ValidatorExtensions.AddHasMaxLength<T>(Validator<T>, Func<T, string>, int, string) ValidatorExtensions.AddHasMinLength<T>(Validator<T>, Func<T, string>, int, string) ValidatorExtensions.AddIsDateTime<T>(Validator<T>, Func<T, DateTime?>, string) ValidatorExtensions.AddIsDateTime<T>(Validator<T>, Func<T, string>, string) ValidatorExtensions.AddIsDateTime<T>(Validator<T>, Func<T, string>, string, DateTimeStyles, string) ValidatorExtensions.AddIsDateTime<T>(Validator<T>, Func<T, string>, string, IFormatProvider, DateTimeStyles, string) ValidatorExtensions.AddIsDateTime<T>(Validator<T>, Func<T, string>, string, IFormatProvider, string) ValidatorExtensions.AddIsDateTime<T>(Validator<T>, Func<T, string>, string, string) ValidatorExtensions.AddIsEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) ValidatorExtensions.AddIsEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) ValidatorExtensions.AddIsGreaterThanOrEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) ValidatorExtensions.AddIsGreaterThanOrEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) ValidatorExtensions.AddIsGreatorThan<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) ValidatorExtensions.AddIsGreatorThan<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) ValidatorExtensions.AddIsInDomain<T>(Validator<T>, Func<T, MailAddress>, string[], string) ValidatorExtensions.AddIsInDomain<T>(Validator<T>, Func<T, string>, string[], string) ValidatorExtensions.AddIsLessThanOrEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) ValidatorExtensions.AddIsLessThanOrEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) ValidatorExtensions.AddIsLessThan<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) ValidatorExtensions.AddIsLessThan<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) ValidatorExtensions.AddIsMailAddress<T>(Validator<T>, Func<T, string>, string) ValidatorExtensions.AddIsNDigitString<T>(Validator<T>, Func<T, string>, int, string) ValidatorExtensions.AddIsNotEqual<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) ValidatorExtensions.AddIsNotEqual<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) ValidatorExtensions.AddIsNotInDomain<T>(Validator<T>, Func<T, MailAddress>, string[], string) ValidatorExtensions.AddIsNotInDomain<T>(Validator<T>, Func<T, string>, string[], string) ValidatorExtensions.AddIsNotNullOrEmpty<T>(Validator<T>, Func<T, string>, string) ValidatorExtensions.AddIsNotNullOrWhiteSpace<T>(Validator<T>, Func<T, string>, string) ValidatorExtensions.AddIsNotNull<T>(Validator<T>, Func<T, string>, string) ValidatorExtensions.AddIsNullOrEmpty<T>(Validator<T>, Func<T, string>, string) ValidatorExtensions.AddIsNullOrWhiteSpace<T>(Validator<T>, Func<T, string>, string) ValidatorExtensions.AddIsNull<T>(Validator<T>, Func<T, string>, string) ValidatorExtensions.AddIsNumeric<T>(Validator<T>, Func<T, object>, string) ValidatorExtensions.AddIsRegexMatch<T>(Validator<T>, Func<T, string>, string, string) ValidatorExtensions.AddIsRegexMatch<T>(Validator<T>, Func<T, string>, string, RegexOptions, string) ValidatorExtensions.AddIsRegexMatch<T>(Validator<T>, Func<T, string>, Regex, string) Methods Add(Func<T, bool>, string) Adds the specified validate. public void Add(Func<T, bool> validate, string errorMessage) Parameters validate Func<T, bool> The validate. errorMessage string The error message."
  },
  "api/DbFacade.DataLayer.Models.html": {
    "href": "api/DbFacade.DataLayer.Models.html",
    "title": "Namespace DbFacade.DataLayer.Models | DbFacade",
    "summary": "Namespace DbFacade.DataLayer.Models Classes DataCollection DbTypeCollection EndpointSettings MockResponseSettings ParameterDataCollection ParameterDataCollection<TModel> Schema Validator<T> Interfaces IDataCollection IDbDataModel IDbDataTable IDbResponse IMockResponse"
  },
  "api/DbFacade.Exceptions.DbExecutionException.html": {
    "href": "api/DbFacade.Exceptions.DbExecutionException.html",
    "title": "Class DbExecutionException | DbFacade",
    "summary": "Class DbExecutionException Namespace DbFacade.Exceptions Assembly DbFacade2.dll public class DbExecutionException : FacadeException, ISerializable Inheritance object Exception FacadeException DbExecutionException Implements ISerializable Inherited Members FacadeException.ErrorDetails Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object)"
  },
  "api/DbFacade.Exceptions.FacadeException.html": {
    "href": "api/DbFacade.Exceptions.FacadeException.html",
    "title": "Class FacadeException | DbFacade",
    "summary": "Class FacadeException Namespace DbFacade.Exceptions Assembly DbFacade2.dll public class FacadeException : Exception, ISerializable Inheritance object Exception FacadeException Implements ISerializable Derived DbExecutionException ValidationException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Properties ErrorDetails Gets the error details. public virtual string ErrorDetails { get; } Property Value string The error details."
  },
  "api/DbFacade.Exceptions.ValidationException.html": {
    "href": "api/DbFacade.Exceptions.ValidationException.html",
    "title": "Class ValidationException | DbFacade",
    "summary": "Class ValidationException Namespace DbFacade.Exceptions Assembly DbFacade2.dll public class ValidationException : FacadeException, ISerializable Inheritance object Exception FacadeException ValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Properties Count Gets the count. public int Count { get; } Property Value int The count. ErrorDetails Gets the error details. public override string ErrorDetails { get; } Property Value string The error details. Parameters Gets the parameters. public object Parameters { get; } Property Value object The parameters. ValidationErrors Gets the validation errors. public string[] ValidationErrors { get; } Property Value string[] The validation errors."
  },
  "api/DbFacade.Exceptions.html": {
    "href": "api/DbFacade.Exceptions.html",
    "title": "Namespace DbFacade.Exceptions | DbFacade",
    "summary": "Namespace DbFacade.Exceptions Classes DbExecutionException FacadeException ValidationException"
  },
  "api/DbFacade.Extensions.AccessorExtensions.html": {
    "href": "api/DbFacade.Extensions.AccessorExtensions.html",
    "title": "Class AccessorExtensions | DbFacade",
    "summary": "Class AccessorExtensions Namespace DbFacade.Extensions Assembly DbFacade2.dll public static class AccessorExtensions Inheritance object AccessorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDataCollection<T>(T) public static IDataCollection ToDataCollection<T>(this T source) where T : class Parameters source T Returns IDataCollection Type Parameters T ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) public static IDataCollection ToDataCollection<T>(this T source, Action<ParameterDataCollection<T>> resolveBuilder) where T : class Parameters source T resolveBuilder Action<ParameterDataCollection<T>> Returns IDataCollection Type Parameters T ToDataCollection<T, TAttribute>(T) public static IDataCollection ToDataCollection<T, TAttribute>(this T source) where T : class where TAttribute : Attribute Parameters source T Returns IDataCollection Type Parameters T TAttribute TryGetValue<T>(T, string, out object) public static bool TryGetValue<T>(this T source, string name, out object value) where T : class Parameters source T name string value object Returns bool Type Parameters T"
  },
  "api/DbFacade.Extensions.DbCommandMethodExtensions.html": {
    "href": "api/DbFacade.Extensions.DbCommandMethodExtensions.html",
    "title": "Class DbCommandMethodExtensions | DbFacade",
    "summary": "Class DbCommandMethodExtensions Namespace DbFacade.Extensions Assembly DbFacade2.dll public static class DbCommandMethodExtensions Inheritance object DbCommandMethodExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExecuteAndFetchFirstAsync<T>(IDbCommandMethod) Executes the and fetch first asynchronous. public static Task<Tuple<IDbResponse, IEnumerable<T>>> ExecuteAndFetchFirstAsync<T>(this IDbCommandMethod endpoint) where T : class, IDbDataModel Parameters endpoint IDbCommandMethod The endpoint. Returns Task<Tuple<IDbResponse, IEnumerable<T>>> Type Parameters T ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, Action<T, IDataCollection>) Executes the and fetch first asynchronous. public static Task<Tuple<IDbResponse, IEnumerable<T>>> ExecuteAndFetchFirstAsync<T>(this IDbCommandMethod endpoint, Action<T, IDataCollection> initialize) where T : class Parameters endpoint IDbCommandMethod The endpoint. initialize Action<T, IDataCollection> The initialize. Returns Task<Tuple<IDbResponse, IEnumerable<T>>> Type Parameters T ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, object) Executes the and fetch first asynchronous. public static Task<Tuple<IDbResponse, IEnumerable<T>>> ExecuteAndFetchFirstAsync<T>(this IDbCommandMethod endpoint, object parameters) where T : class, IDbDataModel Parameters endpoint IDbCommandMethod The endpoint. parameters object The parameters. Returns Task<Tuple<IDbResponse, IEnumerable<T>>> Type Parameters T ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, object, Action<T, IDataCollection>) Executes the and fetch first asynchronous. public static Task<Tuple<IDbResponse, IEnumerable<T>>> ExecuteAndFetchFirstAsync<T>(this IDbCommandMethod endpoint, object parameters, Action<T, IDataCollection> initialize) where T : class Parameters endpoint IDbCommandMethod The endpoint. parameters object The parameters. initialize Action<T, IDataCollection> The initialize. Returns Task<Tuple<IDbResponse, IEnumerable<T>>> Type Parameters T ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, CancellationToken) Executes the and fetch first asynchronous. public static Task<Tuple<IDbResponse, IEnumerable<T>>> ExecuteAndFetchFirstAsync<T>(this IDbCommandMethod endpoint, CancellationToken cancellationToken) where T : class, IDbDataModel Parameters endpoint IDbCommandMethod The endpoint. cancellationToken CancellationToken The cancellation token. Returns Task<Tuple<IDbResponse, IEnumerable<T>>> Type Parameters T ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, CancellationToken, Action<T, IDataCollection>) Executes the and fetch first asynchronous. public static Task<Tuple<IDbResponse, IEnumerable<T>>> ExecuteAndFetchFirstAsync<T>(this IDbCommandMethod endpoint, CancellationToken cancellationToken, Action<T, IDataCollection> initialize) where T : class Parameters endpoint IDbCommandMethod The endpoint. cancellationToken CancellationToken The cancellation token. initialize Action<T, IDataCollection> The initialize. Returns Task<Tuple<IDbResponse, IEnumerable<T>>> Type Parameters T ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, CancellationToken, object) Executes the and fetch first asynchronous. public static Task<Tuple<IDbResponse, IEnumerable<T>>> ExecuteAndFetchFirstAsync<T>(this IDbCommandMethod endpoint, CancellationToken cancellationToken, object parameters) where T : class, IDbDataModel Parameters endpoint IDbCommandMethod The endpoint. cancellationToken CancellationToken The cancellation token. parameters object The parameters. Returns Task<Tuple<IDbResponse, IEnumerable<T>>> Type Parameters T ExecuteAndFetchFirstAsync<T>(IDbCommandMethod, CancellationToken, object, Action<T, IDataCollection>) Executes the and fetch first asynchronous. public static Task<Tuple<IDbResponse, IEnumerable<T>>> ExecuteAndFetchFirstAsync<T>(this IDbCommandMethod endpoint, CancellationToken cancellationToken, object parameters, Action<T, IDataCollection> initialize) where T : class Parameters endpoint IDbCommandMethod The endpoint. cancellationToken CancellationToken The cancellation token. parameters object The parameters. initialize Action<T, IDataCollection> The initialize. Returns Task<Tuple<IDbResponse, IEnumerable<T>>> Type Parameters T ExecuteAndFetchFirst<T>(IDbCommandMethod, Action<T, IDataCollection>, out IEnumerable<T>) Executes the and fetch first. public static IDbResponse ExecuteAndFetchFirst<T>(this IDbCommandMethod endpoint, Action<T, IDataCollection> initialize, out IEnumerable<T> data) where T : class Parameters endpoint IDbCommandMethod The endpoint. initialize Action<T, IDataCollection> The initialize. data IEnumerable<T> The data. Returns IDbResponse Type Parameters T ExecuteAndFetchFirst<T>(IDbCommandMethod, out IEnumerable<T>) Executes the and fetch first. public static IDbResponse ExecuteAndFetchFirst<T>(this IDbCommandMethod endpoint, out IEnumerable<T> data) where T : class, IDbDataModel Parameters endpoint IDbCommandMethod The endpoint. data IEnumerable<T> The data. Returns IDbResponse Type Parameters T ExecuteAndFetchFirst<T>(IDbCommandMethod, object, Action<T, IDataCollection>, out IEnumerable<T>) Executes the and fetch first. public static IDbResponse ExecuteAndFetchFirst<T>(this IDbCommandMethod endpoint, object parameters, Action<T, IDataCollection> initialize, out IEnumerable<T> data) where T : class Parameters endpoint IDbCommandMethod The endpoint. parameters object The parameters. initialize Action<T, IDataCollection> The initialize. data IEnumerable<T> The data. Returns IDbResponse Type Parameters T ExecuteAndFetchFirst<T>(IDbCommandMethod, object, out IEnumerable<T>) Executes the and fetch first. public static IDbResponse ExecuteAndFetchFirst<T>(this IDbCommandMethod endpoint, object parameters, out IEnumerable<T> data) where T : class, IDbDataModel Parameters endpoint IDbCommandMethod The endpoint. parameters object The parameters. data IEnumerable<T> The data. Returns IDbResponse Type Parameters T ExecuteGroup(IEnumerable<IDbCommandMethod>, object) Executes the group. public static IEnumerable<IDbResponse> ExecuteGroup(this IEnumerable<IDbCommandMethod> methods, object parameters = null) Parameters methods IEnumerable<IDbCommandMethod> The methods. parameters object The parameters. Returns IEnumerable<IDbResponse> ExecuteGroupAsync(IEnumerable<IDbCommandMethod>, object) Executes the group asynchronous. public static Task<IEnumerable<IDbResponse>> ExecuteGroupAsync(this IEnumerable<IDbCommandMethod> methods, object parameters = null) Parameters methods IEnumerable<IDbCommandMethod> The methods. parameters object The parameters. Returns Task<IEnumerable<IDbResponse>> ExecuteGroupAsync(IEnumerable<IDbCommandMethod>, CancellationToken, object) Executes the group asynchronous. public static Task<IEnumerable<IDbResponse>> ExecuteGroupAsync(this IEnumerable<IDbCommandMethod> methods, CancellationToken cancellationToken, object parameters = null) Parameters methods IEnumerable<IDbCommandMethod> The methods. cancellationToken CancellationToken The cancellation token. parameters object The parameters. Returns Task<IEnumerable<IDbResponse>>"
  },
  "api/DbFacade.Extensions.DbConnectionConfigExtensions.html": {
    "href": "api/DbFacade.Extensions.DbConnectionConfigExtensions.html",
    "title": "Class DbConnectionConfigExtensions | DbFacade",
    "summary": "Class DbConnectionConfigExtensions Namespace DbFacade.Extensions Assembly DbFacade2.dll public static class DbConnectionConfigExtensions Inheritance object DbConnectionConfigExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateSchema(DbConnectionConfig, string) Creates the schema. public static Schema CreateSchema(this DbConnectionConfig dbConnection, string schema) Parameters dbConnection DbConnectionConfig The database connection. schema string The schema. Returns Schema DefineEndpoint(DbConnectionConfig, string, Action<EndpointSettings>) Creates the method. public static IDbCommandMethod DefineEndpoint(this DbConnectionConfig dbConnection, string name, Action<EndpointSettings> configure) Parameters dbConnection DbConnectionConfig The database connection. name string configure Action<EndpointSettings> The configure. Returns IDbCommandMethod DefineEndpoint(Schema, string, Action<EndpointSettings>) Creates the method. public static IDbCommandMethod DefineEndpoint(this Schema schema, string name, Action<EndpointSettings> configure) Parameters schema Schema The schema. name string configure Action<EndpointSettings> The configure. Returns IDbCommandMethod"
  },
  "api/DbFacade.Extensions.DbDataCollectionExtensions.html": {
    "href": "api/DbFacade.Extensions.DbDataCollectionExtensions.html",
    "title": "Class DbDataCollectionExtensions | DbFacade",
    "summary": "Class DbDataCollectionExtensions Namespace DbFacade.Extensions Assembly DbFacade2.dll public static class DbDataCollectionExtensions Inheritance object DbDataCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetValue<T>(IDataCollection, string, T) Gets the value. public static T GetValue<T>(this IDataCollection collection, string key, T defaultValue = default) Parameters collection IDataCollection The collection. key string The key. defaultValue T The default value. Returns T Type Parameters T ToBoolean<T>(IDataCollection, string, T) Converts to boolean. public static bool ToBoolean<T>(this IDataCollection collection, string key, T trueValue) where T : IComparable Parameters collection IDataCollection The collection. key string The key. trueValue T The true value. Returns bool Type Parameters T ToDateTime(IDataCollection, string, string, DateTimeStyles) Converts to datetime. public static DateTime? ToDateTime(this IDataCollection collection, string key, string format, DateTimeStyles style = DateTimeStyles.None) Parameters collection IDataCollection The collection. key string The key. format string The format. style DateTimeStyles The style. Returns DateTime? ToDateTime(IDataCollection, string, string, IFormatProvider, DateTimeStyles) Converts to datetime. public static DateTime? ToDateTime(this IDataCollection collection, string key, string format, IFormatProvider provider, DateTimeStyles style = DateTimeStyles.None) Parameters collection IDataCollection The collection. key string The key. format string The format. provider IFormatProvider The provider. style DateTimeStyles The style. Returns DateTime? ToDateTimeString(IDataCollection, string, string) Converts to datetimestring. public static string ToDateTimeString(this IDataCollection collection, string key, string format) Parameters collection IDataCollection The collection. key string The key. format string The format. Returns string ToDbDataModel<T>(IDataCollection) Converts to dbdatamodel. public static T ToDbDataModel<T>(this IDataCollection collection) where T : class, IDbDataModel Parameters collection IDataCollection The collection. Returns T Type Parameters T ToDbDataModel<T>(IDataCollection, Action<T, IDataCollection>) Converts to dbdatamodel. public static T ToDbDataModel<T>(this IDataCollection collection, Action<T, IDataCollection> initialize) where T : class Parameters collection IDataCollection The collection. initialize Action<T, IDataCollection> The initialize. Returns T Type Parameters T ToDbDataModel<T>(IDataCollection, Func<T>) Converts to dbdatamodel. public static T ToDbDataModel<T>(this IDataCollection collection, Func<T> createInstance) where T : IDbDataModel Parameters collection IDataCollection The collection. createInstance Func<T> The create instance. Returns T Type Parameters T ToDbDataModel<T>(IDataCollection, Func<T>, Action<T, IDataCollection>) Converts to dbdatamodel. public static T ToDbDataModel<T>(this IDataCollection collection, Func<T> createInstance, Action<T, IDataCollection> initialize) Parameters collection IDataCollection The collection. createInstance Func<T> The create instance. initialize Action<T, IDataCollection> The initialize. Returns T Type Parameters T ToEnumerable<T>(IDataCollection, string, char) Converts to enumerable. public static IEnumerable<T> ToEnumerable<T>(this IDataCollection collection, string key, char separator = ',') Parameters collection IDataCollection The collection. key string The key. separator char The separator. Returns IEnumerable<T> Type Parameters T"
  },
  "api/DbFacade.Extensions.DbResponseExtensions.html": {
    "href": "api/DbFacade.Extensions.DbResponseExtensions.html",
    "title": "Class DbResponseExtensions | DbFacade",
    "summary": "Class DbResponseExtensions Namespace DbFacade.Extensions Assembly DbFacade2.dll public static class DbResponseExtensions Inheritance object DbResponseExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDbDataModelList<T>(IDbResponse, Action<T, IDataCollection>, int) Converts to dbdatamodellist. public static IEnumerable<T> ToDbDataModelList<T>(this IDbResponse response, Action<T, IDataCollection> initialize, int index = 0) where T : class Parameters response IDbResponse The response. initialize Action<T, IDataCollection> The initialize. index int The index. Returns IEnumerable<T> Type Parameters T ToDbDataModelList<T>(IDbResponse, int) Converts to dbdatamodellist. public static IEnumerable<T> ToDbDataModelList<T>(this IDbResponse response, int index = 0) where T : class, IDbDataModel Parameters response IDbResponse The response. index int The index. Returns IEnumerable<T> Type Parameters T"
  },
  "api/DbFacade.Extensions.EndpointSettingsExtensions.html": {
    "href": "api/DbFacade.Extensions.EndpointSettingsExtensions.html",
    "title": "Class EndpointSettingsExtensions | DbFacade",
    "summary": "Class EndpointSettingsExtensions Namespace DbFacade.Extensions Assembly DbFacade2.dll public static class EndpointSettingsExtensions Inheritance object EndpointSettingsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AsNonQuery(EndpointSettings, params Func<object, string>[]) Ases the non query. public static EndpointSettings AsNonQuery(this EndpointSettings settings, params Func<object, string>[] queryBuilders) Parameters settings EndpointSettings The settings. queryBuilders Func<object, string>[] The query builders. Returns EndpointSettings AsNonQuery(EndpointSettings, params string[]) Ases the non query. public static EndpointSettings AsNonQuery(this EndpointSettings settings, params string[] queries) Parameters settings EndpointSettings The settings. queries string[] The queries. Returns EndpointSettings AsQuery(EndpointSettings, params Func<object, string>[]) Ases the query. public static EndpointSettings AsQuery(this EndpointSettings settings, params Func<object, string>[] queryBuilders) Parameters settings EndpointSettings The settings. queryBuilders Func<object, string>[] The query builders. Returns EndpointSettings AsQuery(EndpointSettings, params string[]) Ases the query. public static EndpointSettings AsQuery(this EndpointSettings settings, params string[] queries) Parameters settings EndpointSettings The settings. queries string[] The queries. Returns EndpointSettings AsScalar(EndpointSettings, Func<object, string>) Ases the scalar. public static EndpointSettings AsScalar(this EndpointSettings settings, Func<object, string> queryBuilder) Parameters settings EndpointSettings The settings. queryBuilder Func<object, string> The query builder. Returns EndpointSettings AsScalar(EndpointSettings, string) Ases the scalar. public static EndpointSettings AsScalar(this EndpointSettings settings, string text) Parameters settings EndpointSettings The settings. text string The text. Returns EndpointSettings AsStoredProcedure(EndpointSettings, string) Ases the stored procedure. public static EndpointSettings AsStoredProcedure(this EndpointSettings settings, string commandText) Parameters settings EndpointSettings The settings. commandText string The command text. Returns EndpointSettings AsTableDirect(EndpointSettings, string) Ases the table direct. public static EndpointSettings AsTableDirect(this EndpointSettings settings, string tableName) Parameters settings EndpointSettings The settings. tableName string Name of the table. Returns EndpointSettings AsTransaction(EndpointSettings, IsolationLevel) Ases the transaction. public static EndpointSettings AsTransaction(this EndpointSettings settings, IsolationLevel isolationLevel = IsolationLevel.Unspecified) Parameters settings EndpointSettings The settings. isolationLevel IsolationLevel The isolation level. Returns EndpointSettings AsXml(EndpointSettings, Func<object, string>, XmlReadMode) Ases the XML. public static EndpointSettings AsXml(this EndpointSettings settings, Func<object, string> queryBuilder, XmlReadMode xmlReadMode = XmlReadMode.Fragment) Parameters settings EndpointSettings The settings. queryBuilder Func<object, string> The query builder. xmlReadMode XmlReadMode The XML read mode. Returns EndpointSettings AsXml(EndpointSettings, string, XmlReadMode) Ases the XML. public static EndpointSettings AsXml(this EndpointSettings settings, string query, XmlReadMode xmlReadMode = XmlReadMode.Fragment) Parameters settings EndpointSettings The settings. query string The query. xmlReadMode XmlReadMode The XML read mode. Returns EndpointSettings BindErrorHandler(EndpointSettings, Action<EndpointErrorInfo>) Binds the error handler. public static EndpointSettings BindErrorHandler(this EndpointSettings settings, Action<EndpointErrorInfo> onError) Parameters settings EndpointSettings The settings. onError Action<EndpointErrorInfo> Returns EndpointSettings BindOnBeforeExecute(EndpointSettings, Action<IDbCommand, object>) Binds the on before execute. public static EndpointSettings BindOnBeforeExecute(this EndpointSettings settings, Action<IDbCommand, object> onBeforeExecute) Parameters settings EndpointSettings The settings. onBeforeExecute Action<IDbCommand, object> The on before execute. Returns EndpointSettings BindOnBeforeExecuteAsync(EndpointSettings, Func<IDbCommand, object, CancellationToken, Task>) Binds the on before execute asynchronous. public static EndpointSettings BindOnBeforeExecuteAsync(this EndpointSettings settings, Func<IDbCommand, object, CancellationToken, Task> onBeforeExecuteAsync) Parameters settings EndpointSettings The settings. onBeforeExecuteAsync Func<IDbCommand, object, CancellationToken, Task> The on before execute asynchronous. Returns EndpointSettings WithParameters(EndpointSettings, Action<ParameterDataCollection>) Withes the parameters. public static EndpointSettings WithParameters(this EndpointSettings settings, Action<ParameterDataCollection> parametersBuilder) Parameters settings EndpointSettings The settings. parametersBuilder Action<ParameterDataCollection> The parameters builder. Returns EndpointSettings WithParameters<T>(EndpointSettings, Action<ParameterDataCollection<T>>) Withes the parameters. public static EndpointSettings WithParameters<T>(this EndpointSettings settings, Action<ParameterDataCollection<T>> parametersBuilder) where T : class Parameters settings EndpointSettings The settings. parametersBuilder Action<ParameterDataCollection<T>> The parameters builder. Returns EndpointSettings Type Parameters T WithParameters<T>(EndpointSettings, Action<T, ParameterDataCollection>) Withes the parameters. public static EndpointSettings WithParameters<T>(this EndpointSettings settings, Action<T, ParameterDataCollection> parametersBuilder) Parameters settings EndpointSettings The settings. parametersBuilder Action<T, ParameterDataCollection> The parameters builder. Returns EndpointSettings Type Parameters T WithValidation<T>(EndpointSettings, Action<Validator<T>>) Withes the validation. public static EndpointSettings WithValidation<T>(this EndpointSettings settings, Action<Validator<T>> validatorInitializer) where T : class Parameters settings EndpointSettings The settings. validatorInitializer Action<Validator<T>> The validator initializer. Returns EndpointSettings Type Parameters T"
  },
  "api/DbFacade.Extensions.ValidatorExtensions.html": {
    "href": "api/DbFacade.Extensions.ValidatorExtensions.html",
    "title": "Class ValidatorExtensions | DbFacade",
    "summary": "Class ValidatorExtensions Namespace DbFacade.Extensions Assembly DbFacade2.dll public static class ValidatorExtensions Inheritance object ValidatorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddHasMaxLength<T>(Validator<T>, Func<T, string>, int, string) Adds the maximum length of the has. public static void AddHasMaxLength<T>(this Validator<T> validator, Func<T, string> getValue, int max, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. max int The maximum. errorMessage string The error message. Type Parameters T AddHasMinLength<T>(Validator<T>, Func<T, string>, int, string) Adds the minimum length of the has. public static void AddHasMinLength<T>(this Validator<T> validator, Func<T, string> getValue, int min, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. min int The minimum. errorMessage string The error message. Type Parameters T AddIsDateTime<T>(Validator<T>, Func<T, DateTime?>, string) Adds the is date time. public static void AddIsDateTime<T>(this Validator<T> validator, Func<T, DateTime?> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, DateTime?> The get value. errorMessage string The error message. Type Parameters T AddIsDateTime<T>(Validator<T>, Func<T, string>, string) Adds the is date time. public static void AddIsDateTime<T>(this Validator<T> validator, Func<T, string> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. errorMessage string The error message. Type Parameters T AddIsDateTime<T>(Validator<T>, Func<T, string>, string, DateTimeStyles, string) Adds the is date time. public static void AddIsDateTime<T>(this Validator<T> validator, Func<T, string> getValue, string dateFormat, DateTimeStyles dateTimeStyles, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. dateFormat string The date format. dateTimeStyles DateTimeStyles The date time styles. errorMessage string The error message. Type Parameters T AddIsDateTime<T>(Validator<T>, Func<T, string>, string, IFormatProvider, DateTimeStyles, string) Adds the is date time. public static void AddIsDateTime<T>(this Validator<T> validator, Func<T, string> getValue, string dateFormat, IFormatProvider provider, DateTimeStyles dateTimeStyles, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. dateFormat string The date format. provider IFormatProvider The provider. dateTimeStyles DateTimeStyles The date time styles. errorMessage string The error message. Type Parameters T AddIsDateTime<T>(Validator<T>, Func<T, string>, string, IFormatProvider, string) Adds the is date time. public static void AddIsDateTime<T>(this Validator<T> validator, Func<T, string> getValue, string dateFormat, IFormatProvider provider, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. dateFormat string The date format. provider IFormatProvider The provider. errorMessage string The error message. Type Parameters T AddIsDateTime<T>(Validator<T>, Func<T, string>, string, string) Adds the is date time. public static void AddIsDateTime<T>(this Validator<T> validator, Func<T, string> getValue, string dateFormat, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. dateFormat string The date format. errorMessage string The error message. Type Parameters T AddIsEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) Adds the is equal to. public static void AddIsEqualTo<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, Func<T, TValue> getOtherValue, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. getOtherValue Func<T, TValue> The get other value. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) Adds the is equal to. public static void AddIsEqualTo<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, TValue other, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. other TValue The other. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsGreaterThanOrEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) Adds the is greater than or equal to. public static void AddIsGreaterThanOrEqualTo<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, Func<T, TValue> getOtherValue, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. getOtherValue Func<T, TValue> The get other value. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsGreaterThanOrEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) Adds the is greater than or equal to. public static void AddIsGreaterThanOrEqualTo<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, TValue other, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. other TValue The other. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsGreatorThan<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) Adds the is greator than. public static void AddIsGreatorThan<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, Func<T, TValue> getOtherValue, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. getOtherValue Func<T, TValue> The get other value. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsGreatorThan<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) Adds the is greator than. public static void AddIsGreatorThan<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, TValue other, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. other TValue The other. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsInDomain<T>(Validator<T>, Func<T, MailAddress>, string[], string) Adds the is in domain. public static void AddIsInDomain<T>(this Validator<T> validator, Func<T, MailAddress> getValue, string[] domains, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, MailAddress> The get value. domains string[] The domains. errorMessage string The error message. Type Parameters T AddIsInDomain<T>(Validator<T>, Func<T, string>, string[], string) Adds the is in domain. public static void AddIsInDomain<T>(this Validator<T> validator, Func<T, string> getValue, string[] domains, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. domains string[] The domains. errorMessage string The error message. Type Parameters T AddIsLessThanOrEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) Adds the is less than or equal to. public static void AddIsLessThanOrEqualTo<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, Func<T, TValue> getOtherValue, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. getOtherValue Func<T, TValue> The get other value. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsLessThanOrEqualTo<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) Adds the is less than or equal to. public static void AddIsLessThanOrEqualTo<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, TValue other, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. other TValue The other. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsLessThan<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) Adds the is less than. public static void AddIsLessThan<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, Func<T, TValue> getOtherValue, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. getOtherValue Func<T, TValue> The get other value. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsLessThan<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) Adds the is less than. public static void AddIsLessThan<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, TValue other, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. other TValue The other. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsMailAddress<T>(Validator<T>, Func<T, string>, string) Adds the is mail address. public static void AddIsMailAddress<T>(this Validator<T> validator, Func<T, string> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. errorMessage string The error message. Type Parameters T AddIsNDigitString<T>(Validator<T>, Func<T, string>, int, string) Adds the is n digit string. public static void AddIsNDigitString<T>(this Validator<T> validator, Func<T, string> getValue, int length, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. length int The length. errorMessage string The error message. Type Parameters T AddIsNotEqual<T, TValue>(Validator<T>, Func<T, TValue>, Func<T, TValue>, string) Adds the is not equal. public static void AddIsNotEqual<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, Func<T, TValue> getOtherValue, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. getOtherValue Func<T, TValue> The get other value. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsNotEqual<T, TValue>(Validator<T>, Func<T, TValue>, TValue, string) Adds the is not equal. public static void AddIsNotEqual<T, TValue>(this Validator<T> validator, Func<T, TValue> getValue, TValue other, string errorMessage) where T : class where TValue : IComparable Parameters validator Validator<T> The validator. getValue Func<T, TValue> The get value. other TValue The other. errorMessage string The error message. Type Parameters T TValue The type of the value. AddIsNotInDomain<T>(Validator<T>, Func<T, MailAddress>, string[], string) Adds the is not in domain. public static void AddIsNotInDomain<T>(this Validator<T> validator, Func<T, MailAddress> getValue, string[] domains, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, MailAddress> The get value. domains string[] The domains. errorMessage string The error message. Type Parameters T AddIsNotInDomain<T>(Validator<T>, Func<T, string>, string[], string) Adds the is not in domain. public static void AddIsNotInDomain<T>(this Validator<T> validator, Func<T, string> getValue, string[] domains, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. domains string[] The domains. errorMessage string The error message. Type Parameters T AddIsNotNullOrEmpty<T>(Validator<T>, Func<T, string>, string) Adds the is not null or empty. public static void AddIsNotNullOrEmpty<T>(this Validator<T> validator, Func<T, string> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. errorMessage string The error message. Type Parameters T AddIsNotNullOrWhiteSpace<T>(Validator<T>, Func<T, string>, string) Adds the is not null or white space. public static void AddIsNotNullOrWhiteSpace<T>(this Validator<T> validator, Func<T, string> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. errorMessage string The error message. Type Parameters T AddIsNotNull<T>(Validator<T>, Func<T, string>, string) Adds the is not null. public static void AddIsNotNull<T>(this Validator<T> validator, Func<T, string> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. errorMessage string The error message. Type Parameters T AddIsNullOrEmpty<T>(Validator<T>, Func<T, string>, string) Adds the is null or empty. public static void AddIsNullOrEmpty<T>(this Validator<T> validator, Func<T, string> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. errorMessage string The error message. Type Parameters T AddIsNullOrWhiteSpace<T>(Validator<T>, Func<T, string>, string) Adds the is null or white space. public static void AddIsNullOrWhiteSpace<T>(this Validator<T> validator, Func<T, string> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. errorMessage string The error message. Type Parameters T AddIsNull<T>(Validator<T>, Func<T, string>, string) Adds the is null. public static void AddIsNull<T>(this Validator<T> validator, Func<T, string> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. errorMessage string The error message. Type Parameters T AddIsNumeric<T>(Validator<T>, Func<T, object>, string) Adds the is numeric. public static void AddIsNumeric<T>(this Validator<T> validator, Func<T, object> getValue, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, object> The get value. errorMessage string The error message. Type Parameters T AddIsRegexMatch<T>(Validator<T>, Func<T, string>, string, string) Adds the is regex match. public static void AddIsRegexMatch<T>(this Validator<T> validator, Func<T, string> getValue, string regexMatchStr, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. regexMatchStr string The regex match string. errorMessage string The error message. Type Parameters T AddIsRegexMatch<T>(Validator<T>, Func<T, string>, string, RegexOptions, string) Adds the is regex match. public static void AddIsRegexMatch<T>(this Validator<T> validator, Func<T, string> getValue, string regexMatchStr, RegexOptions options, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. regexMatchStr string The regex match string. options RegexOptions The options. errorMessage string The error message. Type Parameters T AddIsRegexMatch<T>(Validator<T>, Func<T, string>, Regex, string) Adds the is regex match. public static void AddIsRegexMatch<T>(this Validator<T> validator, Func<T, string> getValue, Regex regex, string errorMessage) where T : class Parameters validator Validator<T> The validator. getValue Func<T, string> The get value. regex Regex The regex. errorMessage string The error message. Type Parameters T"
  },
  "api/DbFacade.Extensions.html": {
    "href": "api/DbFacade.Extensions.html",
    "title": "Namespace DbFacade.Extensions | DbFacade",
    "summary": "Namespace DbFacade.Extensions Classes AccessorExtensions DbCommandMethodExtensions DbConnectionConfigExtensions DbDataCollectionExtensions DbResponseExtensions EndpointSettingsExtensions ValidatorExtensions"
  },
  "api/DbFacade.Odbc.DataLayer.ConnectionService.OdbcDbConnectionProvider.html": {
    "href": "api/DbFacade.Odbc.DataLayer.ConnectionService.OdbcDbConnectionProvider.html",
    "title": "Class OdbcDbConnectionProvider | DbFacade",
    "summary": "Class OdbcDbConnectionProvider Namespace DbFacade.Odbc.DataLayer.ConnectionService Assembly DbFacade.Odbc.dll public class OdbcDbConnectionProvider : IDbConnectionProvider Inheritance object OdbcDbConnectionProvider Implements IDbConnectionProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors OdbcDbConnectionProvider() public OdbcDbConnectionProvider() Properties DbConnectionConfig public DbConnectionConfig DbConnectionConfig { get; } Property Value DbConnectionConfig DbTypeCollection public DbTypeCollection DbTypeCollection { get; } Property Value DbTypeCollection Methods BeginTransaction(IDbConnection, IsolationLevel) public IDbTransaction BeginTransaction(IDbConnection connection, IsolationLevel isolationLevel) Parameters connection IDbConnection isolationLevel IsolationLevel Returns IDbTransaction BeginTransactionAsync(IDbConnection, CancellationToken, IsolationLevel) public Task<IDbTransaction> BeginTransactionAsync(IDbConnection connection, CancellationToken cancellationToken, IsolationLevel isolationLevel) Parameters connection IDbConnection cancellationToken CancellationToken isolationLevel IsolationLevel Returns Task<IDbTransaction> BindConnectionString(Func<string, string>) public void BindConnectionString(Func<string, string> getConnectionString) Parameters getConnectionString Func<string, string> BindConnectionString(string) public void BindConnectionString(string connectionString) Parameters connectionString string BindErrorHandler(Action<EndpointErrorInfo>) public void BindErrorHandler(Action<EndpointErrorInfo> errorHandler) Parameters errorHandler Action<EndpointErrorInfo> CanExecuteXmlReader(IDbCommand) public bool CanExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns bool ExecuteNonQuery(IDbCommand) public int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQueryAsync(IDbCommand, CancellationToken) public Task<int> ExecuteNonQueryAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<int> ExecuteReader(IDbCommand) public DbDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns DbDataReader ExecuteReaderAsync(IDbCommand, CancellationToken) public Task<DbDataReader> ExecuteReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<DbDataReader> ExecuteScalar(IDbCommand) public object ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object ExecuteScalarAsync(IDbCommand, CancellationToken) public Task<object> ExecuteScalarAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<object> ExecuteXmlReader(IDbCommand) public XmlReader ExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns XmlReader ExecuteXmlReaderAsync(IDbCommand, CancellationToken) public Task<XmlReader> ExecuteXmlReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<XmlReader> GetDbConnection(string) public IDbConnection GetDbConnection(string connectionStringId) Parameters connectionStringId string Returns IDbConnection GetDbDataAdapter() public IDbDataAdapter GetDbDataAdapter() Returns IDbDataAdapter OnError(EndpointErrorInfo) public void OnError(EndpointErrorInfo info) Parameters info EndpointErrorInfo ResolveParameterName(string, bool) public string ResolveParameterName(string name, bool useFullParameterName) Parameters name string useFullParameterName bool Returns string"
  },
  "api/DbFacade.Odbc.DataLayer.ConnectionService.html": {
    "href": "api/DbFacade.Odbc.DataLayer.ConnectionService.html",
    "title": "Namespace DbFacade.Odbc.DataLayer.ConnectionService | DbFacade",
    "summary": "Namespace DbFacade.Odbc.DataLayer.ConnectionService Classes OdbcDbConnectionProvider"
  },
  "api/DbFacade.OleDb.DataLayer.ConnectionService.OleDbConnectionProvider.html": {
    "href": "api/DbFacade.OleDb.DataLayer.ConnectionService.OleDbConnectionProvider.html",
    "title": "Class OleDbConnectionProvider | DbFacade",
    "summary": "Class OleDbConnectionProvider Namespace DbFacade.OleDb.DataLayer.ConnectionService Assembly DbFacade.OleDb.dll public class OleDbConnectionProvider : IDbConnectionProvider Inheritance object OleDbConnectionProvider Implements IDbConnectionProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors OleDbConnectionProvider() public OleDbConnectionProvider() Properties DbConnectionConfig public DbConnectionConfig DbConnectionConfig { get; } Property Value DbConnectionConfig DbTypeCollection public DbTypeCollection DbTypeCollection { get; } Property Value DbTypeCollection Methods BeginTransaction(IDbConnection, IsolationLevel) public IDbTransaction BeginTransaction(IDbConnection connection, IsolationLevel isolationLevel) Parameters connection IDbConnection isolationLevel IsolationLevel Returns IDbTransaction BeginTransactionAsync(IDbConnection, CancellationToken, IsolationLevel) public Task<IDbTransaction> BeginTransactionAsync(IDbConnection connection, CancellationToken cancellationToken, IsolationLevel isolationLevel) Parameters connection IDbConnection cancellationToken CancellationToken isolationLevel IsolationLevel Returns Task<IDbTransaction> BindConnectionString(Func<string, string>) public void BindConnectionString(Func<string, string> getConnectionString) Parameters getConnectionString Func<string, string> BindConnectionString(string) public void BindConnectionString(string connectionString) Parameters connectionString string BindErrorHandler(Action<EndpointErrorInfo>) public void BindErrorHandler(Action<EndpointErrorInfo> errorHandler) Parameters errorHandler Action<EndpointErrorInfo> CanExecuteXmlReader(IDbCommand) public bool CanExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns bool ExecuteNonQuery(IDbCommand) public int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQueryAsync(IDbCommand, CancellationToken) public Task<int> ExecuteNonQueryAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<int> ExecuteReader(IDbCommand) public DbDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns DbDataReader ExecuteReaderAsync(IDbCommand, CancellationToken) public Task<DbDataReader> ExecuteReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<DbDataReader> ExecuteScalar(IDbCommand) public object ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object ExecuteScalarAsync(IDbCommand, CancellationToken) public Task<object> ExecuteScalarAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<object> ExecuteXmlReader(IDbCommand) public XmlReader ExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns XmlReader ExecuteXmlReaderAsync(IDbCommand, CancellationToken) public Task<XmlReader> ExecuteXmlReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<XmlReader> GetDbConnection(string) public IDbConnection GetDbConnection(string connectionStringId) Parameters connectionStringId string Returns IDbConnection GetDbDataAdapter() public IDbDataAdapter GetDbDataAdapter() Returns IDbDataAdapter OnError(EndpointErrorInfo) public void OnError(EndpointErrorInfo info) Parameters info EndpointErrorInfo ResolveParameterName(string, bool) public string ResolveParameterName(string name, bool useFullParameterName) Parameters name string useFullParameterName bool Returns string"
  },
  "api/DbFacade.OleDb.DataLayer.ConnectionService.html": {
    "href": "api/DbFacade.OleDb.DataLayer.ConnectionService.html",
    "title": "Namespace DbFacade.OleDb.DataLayer.ConnectionService | DbFacade",
    "summary": "Namespace DbFacade.OleDb.DataLayer.ConnectionService Classes OleDbConnectionProvider"
  },
  "api/DbFacade.Oracle.DataLayer.ConnectionService.OracleDbConnectionProvider.html": {
    "href": "api/DbFacade.Oracle.DataLayer.ConnectionService.OracleDbConnectionProvider.html",
    "title": "Class OracleDbConnectionProvider | DbFacade",
    "summary": "Class OracleDbConnectionProvider Namespace DbFacade.Oracle.DataLayer.ConnectionService Assembly DbFacade.Oracle.dll public class OracleDbConnectionProvider : IDbConnectionProvider Inheritance object OracleDbConnectionProvider Implements IDbConnectionProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors OracleDbConnectionProvider() public OracleDbConnectionProvider() Properties DbConnectionConfig public DbConnectionConfig DbConnectionConfig { get; } Property Value DbConnectionConfig DbTypeCollection public DbTypeCollection DbTypeCollection { get; } Property Value DbTypeCollection Methods BeginTransaction(IDbConnection, IsolationLevel) public IDbTransaction BeginTransaction(IDbConnection connection, IsolationLevel isolationLevel) Parameters connection IDbConnection isolationLevel IsolationLevel Returns IDbTransaction BeginTransactionAsync(IDbConnection, CancellationToken, IsolationLevel) public Task<IDbTransaction> BeginTransactionAsync(IDbConnection connection, CancellationToken cancellationToken, IsolationLevel isolationLevel) Parameters connection IDbConnection cancellationToken CancellationToken isolationLevel IsolationLevel Returns Task<IDbTransaction> BindConnectionString(Func<string, string>) public void BindConnectionString(Func<string, string> getConnectionString) Parameters getConnectionString Func<string, string> BindConnectionString(string) public void BindConnectionString(string connectionString) Parameters connectionString string BindCredentials(OracleCredential) public void BindCredentials(OracleCredential credential) Parameters credential OracleCredential BindCredentials(string, string) public void BindCredentials(string username, string password) Parameters username string password string BindErrorHandler(Action<EndpointErrorInfo>) public void BindErrorHandler(Action<EndpointErrorInfo> errorHandler) Parameters errorHandler Action<EndpointErrorInfo> CanExecuteXmlReader(IDbCommand) public bool CanExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns bool ExecuteNonQuery(IDbCommand) public int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQueryAsync(IDbCommand, CancellationToken) public Task<int> ExecuteNonQueryAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<int> ExecuteReader(IDbCommand) public DbDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns DbDataReader ExecuteReaderAsync(IDbCommand, CancellationToken) public Task<DbDataReader> ExecuteReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<DbDataReader> ExecuteScalar(IDbCommand) public object ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object ExecuteScalarAsync(IDbCommand, CancellationToken) public Task<object> ExecuteScalarAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<object> ExecuteXmlReader(IDbCommand) public XmlReader ExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns XmlReader ExecuteXmlReaderAsync(IDbCommand, CancellationToken) public Task<XmlReader> ExecuteXmlReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<XmlReader> GetDbConnection(string) public IDbConnection GetDbConnection(string connectionStringId) Parameters connectionStringId string Returns IDbConnection GetDbDataAdapter() public IDbDataAdapter GetDbDataAdapter() Returns IDbDataAdapter OnError(EndpointErrorInfo) public void OnError(EndpointErrorInfo info) Parameters info EndpointErrorInfo ResolveParameterName(string, bool) public string ResolveParameterName(string name, bool useFullParameterName) Parameters name string useFullParameterName bool Returns string"
  },
  "api/DbFacade.Oracle.DataLayer.ConnectionService.html": {
    "href": "api/DbFacade.Oracle.DataLayer.ConnectionService.html",
    "title": "Namespace DbFacade.Oracle.DataLayer.ConnectionService | DbFacade",
    "summary": "Namespace DbFacade.Oracle.DataLayer.ConnectionService Classes OracleDbConnectionProvider"
  },
  "api/DbFacade.SQLite.DataLayer.ConnectionService.SqLiteDbConnectionProvider.html": {
    "href": "api/DbFacade.SQLite.DataLayer.ConnectionService.SqLiteDbConnectionProvider.html",
    "title": "Class SqLiteDbConnectionProvider | DbFacade",
    "summary": "Class SqLiteDbConnectionProvider Namespace DbFacade.SQLite.DataLayer.ConnectionService Assembly DbFacade.SQLite.dll public class SqLiteDbConnectionProvider : IDbConnectionProvider Inheritance object SqLiteDbConnectionProvider Implements IDbConnectionProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods AccessorExtensions.ToDataCollection<T>(T) AccessorExtensions.ToDataCollection<T>(T, Action<ParameterDataCollection<T>>) AccessorExtensions.ToDataCollection<T, TAttribute>(T) AccessorExtensions.TryGetValue<T>(T, string, out object) Constructors SqLiteDbConnectionProvider() public SqLiteDbConnectionProvider() Properties DbConnectionConfig public DbConnectionConfig DbConnectionConfig { get; } Property Value DbConnectionConfig DbTypeCollection public DbTypeCollection DbTypeCollection { get; } Property Value DbTypeCollection Methods BeginTransaction(IDbConnection, IsolationLevel) public IDbTransaction BeginTransaction(IDbConnection connection, IsolationLevel isolationLevel) Parameters connection IDbConnection isolationLevel IsolationLevel Returns IDbTransaction BeginTransactionAsync(IDbConnection, CancellationToken, IsolationLevel) public Task<IDbTransaction> BeginTransactionAsync(IDbConnection connection, CancellationToken cancellationToken, IsolationLevel isolationLevel) Parameters connection IDbConnection cancellationToken CancellationToken isolationLevel IsolationLevel Returns Task<IDbTransaction> BindConnectionString(Func<string, string>) public void BindConnectionString(Func<string, string> getConnectionString) Parameters getConnectionString Func<string, string> BindConnectionString(string) public void BindConnectionString(string connectionString) Parameters connectionString string BindErrorHandler(Action<EndpointErrorInfo>) public void BindErrorHandler(Action<EndpointErrorInfo> errorHandler) Parameters errorHandler Action<EndpointErrorInfo> CanExecuteXmlReader(IDbCommand) public bool CanExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns bool ExecuteNonQuery(IDbCommand) public int ExecuteNonQuery(IDbCommand command) Parameters command IDbCommand Returns int ExecuteNonQueryAsync(IDbCommand, CancellationToken) public Task<int> ExecuteNonQueryAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<int> ExecuteReader(IDbCommand) public DbDataReader ExecuteReader(IDbCommand command) Parameters command IDbCommand Returns DbDataReader ExecuteReaderAsync(IDbCommand, CancellationToken) public Task<DbDataReader> ExecuteReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<DbDataReader> ExecuteScalar(IDbCommand) public object ExecuteScalar(IDbCommand command) Parameters command IDbCommand Returns object ExecuteScalarAsync(IDbCommand, CancellationToken) public Task<object> ExecuteScalarAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<object> ExecuteXmlReader(IDbCommand) public XmlReader ExecuteXmlReader(IDbCommand command) Parameters command IDbCommand Returns XmlReader ExecuteXmlReaderAsync(IDbCommand, CancellationToken) public Task<XmlReader> ExecuteXmlReaderAsync(IDbCommand command, CancellationToken cancellationToken) Parameters command IDbCommand cancellationToken CancellationToken Returns Task<XmlReader> GetDbConnection(string) public IDbConnection GetDbConnection(string connectionStringId) Parameters connectionStringId string Returns IDbConnection GetDbDataAdapter() public IDbDataAdapter GetDbDataAdapter() Returns IDbDataAdapter OnError(EndpointErrorInfo) public void OnError(EndpointErrorInfo info) Parameters info EndpointErrorInfo ResolveParameterName(string, bool) public string ResolveParameterName(string name, bool useFullParameterName) Parameters name string useFullParameterName bool Returns string"
  },
  "api/DbFacade.SQLite.DataLayer.ConnectionService.html": {
    "href": "api/DbFacade.SQLite.DataLayer.ConnectionService.html",
    "title": "Namespace DbFacade.SQLite.DataLayer.ConnectionService | DbFacade",
    "summary": "Namespace DbFacade.SQLite.DataLayer.ConnectionService Classes SqLiteDbConnectionProvider"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | DbFacade",
    "summary": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | DbFacade",
    "summary": "Add your introductions here!"
  },
  "author.html": {
    "href": "author.html",
    "title": "About the Developer | DbFacade",
    "summary": "About the Developer"
  },
  "index.html": {
    "href": "index.html",
    "title": "DbFacade | DbFacade",
    "summary": "DbFacade v2.0.0 Confused about how C# .NET projects set up calls to SQL databases? Need a well structured design pattern to organize calls to database stored procedures? Then DbFacade is the solution! DbFacade builds upon ADO.NET and simplifies structuring calls to SQL databases. Key Features Simplified parameter and data binding Built-In configurable parameter validation Easy data model binding Supports syncronous or asyncronous methods Supports .Net Framework and .Net Core projects ADO.NET Support SQL Included Oracle Package DbFacade.Oracle SQLite Package DbFacade.SQLite Odbc Package DbFacade.Odbc OleDb Package DbFacade.OleDb Package Info"
  }
}